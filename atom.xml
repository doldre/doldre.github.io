<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinchen&#39;s Blog</title>
  <subtitle>For you thousands of times.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luoxinchen.me/"/>
  <updated>2016-09-06T05:46:37.000Z</updated>
  <id>http://luoxinchen.me/</id>
  
  <author>
    <name>Xinchen Luo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>暑期集训-7-4-h</title>
    <link href="http://luoxinchen.me/2016/09/06/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD-7-4-h/"/>
    <id>http://luoxinchen.me/2016/09/06/暑期集训-7-4-h/</id>
    <published>2016-09-06T05:14:13.000Z</published>
    <updated>2016-09-06T05:46:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有n条鱼，每条鱼有一个权值vi,给个01矩阵，如果G[i][j]=1，那么第i条鱼可以攻击第j条鱼，并获得价值vi xor vj，每条鱼只能攻击一次。求能够最获得的最大价值和</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>很明显的最大权二分图匹配，对于G[i][j]=1,对i， j连边，边权为vi ^ vj，跑次KM算法。<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">/************************************************</div><div class="line"> *Author        :mathon</div><div class="line"> *Email         :luoxinchen96@gmail.com</div><div class="line">*************************************************/</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;ctime&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">using namespace std;</div><div class="line">typedef pair&lt;int, int&gt; pii;</div><div class="line">typedef long long ll;</div><div class="line">typedef unsigned long long ull;</div><div class="line">#define xx first</div><div class="line">#define lowbit(x) (x&amp;-x)</div><div class="line">#define yy second</div><div class="line">#define pr(x) cout &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; " "</div><div class="line">#define prln(x) cout &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; endl</div><div class="line">const int maxn = 250;</div><div class="line">const int maxm = 25005;</div><div class="line">const int inf= 0x3f3f3f3f;</div><div class="line">char s[200];</div><div class="line">int a[maxn],mat[maxn][maxn];</div><div class="line">struct Edge&#123;</div><div class="line">	int to,next,cap,flow,cost;</div><div class="line">&#125;edge[maxm];</div><div class="line">int head[maxn],tot;</div><div class="line">int pre[maxn],dis[maxn];</div><div class="line">bool vis[maxn];int N;</div><div class="line">void init(int n)&#123;</div><div class="line">	N=n;</div><div class="line">	tot=0;</div><div class="line">	memset(head,-1,sizeof(head));</div><div class="line">&#125;</div><div class="line">void addedge(int u,int v,int cap,int cost)&#123;</div><div class="line">	edge[tot].to=v;</div><div class="line">	edge[tot].cap=cap;</div><div class="line">	edge[tot].cost=cost;</div><div class="line">	edge[tot].flow=0;</div><div class="line">	edge[tot].next=head[u];</div><div class="line">	head[u]=tot++;</div><div class="line">	edge[tot].to=u;</div><div class="line">	edge[tot].cap=0;</div><div class="line">	edge[tot].cost=-cost;</div><div class="line">	edge[tot].flow=0;</div><div class="line">	edge[tot].next=head[v];</div><div class="line">	head[v]=tot++; </div><div class="line">&#125; </div><div class="line">bool spfa(int s,int t)&#123;</div><div class="line">	queue&lt;int&gt; q;</div><div class="line">	for(int i=0;i&lt;N;i++)&#123;</div><div class="line">		dis[i]=inf;</div><div class="line">		vis[i]=false;</div><div class="line">		pre[i]=-1;</div><div class="line">	&#125; dis[s]=0;</div><div class="line">	vis[s]=true;</div><div class="line">	q.push(s);</div><div class="line">	while(!q.empty())&#123;</div><div class="line">		int u=q.front();</div><div class="line">		q.pop();</div><div class="line">		vis[u]=false;</div><div class="line">		for(int i=head[u];i!=-1;i=edge[i].next)&#123;</div><div class="line">			int v=edge[i].to;</div><div class="line">			if(edge[i].cap&gt;edge[i].flow&amp;&amp;dis[v]&gt;dis[u]+edge[i].cost)&#123;</div><div class="line">				dis[v]=dis[u]+edge[i].cost;</div><div class="line">				pre[v]=i;</div><div class="line">				if(!vis[v])&#123;</div><div class="line">					vis[v]=true;</div><div class="line">					q.push(v);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;if(pre[t]==-1) return false;</div><div class="line">	else return true;</div><div class="line">&#125;</div><div class="line">int mincostmaxflow(int s,int t,int &amp;cost)&#123;</div><div class="line">	int flow=0;</div><div class="line">	cost=0;</div><div class="line">	while(spfa(s,t))&#123;</div><div class="line">		int Min=inf;</div><div class="line">		for(int i=pre[t];i!=-1;i=pre[edge[i^1].to])&#123;</div><div class="line">			if(Min&gt;edge[i].cap-edge[i].flow) Min=edge[i].cap-edge[i].flow;</div><div class="line">		&#125;for(int i=pre[t];i!=-1;i=pre[edge[i^1].to])&#123;</div><div class="line">			edge[i].flow+=Min;</div><div class="line">			edge[i^1].flow-=Min;</div><div class="line">			cost+=edge[i].cost*Min;</div><div class="line">		&#125;flow+=Min;</div><div class="line">	&#125;return flow;</div><div class="line">&#125;</div><div class="line"></div><div class="line">char str[maxn];</div><div class="line"></div><div class="line">int A[maxn];</div><div class="line">int main(void) &#123;</div><div class="line">#ifdef MATHON</div><div class="line">    //freopen("in.txt", "r", stdin);</div><div class="line">    //freopen("out.txt", "w", stdout);</div><div class="line">#endif</div><div class="line">    int n;</div><div class="line">    while(scanf("%d", &amp;n) == 1 &amp;&amp; n) &#123;</div><div class="line">        int s = 0, t = 2 * n + 1;</div><div class="line">        init(2*n + 2);</div><div class="line">        for(int i = 1; i &lt;= n; i++) &#123;</div><div class="line">            scanf("%d", &amp;A[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        for (int i = 1; i &lt;= n; i++) &#123;</div><div class="line">            addedge(s, i, 1, 0);</div><div class="line">            addedge(i, t, 1, 0);</div><div class="line">            addedge(i + n, t, 1, 0);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        for (int i = 1; i &lt;= n; i++) &#123;</div><div class="line">            scanf("%s", str + 1);</div><div class="line">            for (int j = 1; j &lt;= n; j++) &#123;</div><div class="line">                if(str[j] == '1') &#123;</div><div class="line">                    addedge(i, j + n, 1, -(A[i]^A[j]));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        int cost;</div><div class="line">        mincostmaxflow(s, t, cost);</div><div class="line">        printf("%d\n", -cost);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;有n条鱼，每条鱼有一个权值vi,给个01矩阵，如果G[i][j]=1，那么第i条鱼可以攻击第j条鱼，并获得价值vi xor vj，每条鱼只能攻击一次。求能够最获得的最大价值和&lt;/p&gt;
&lt;h2 id=&quot;做法&quot;&gt;&lt;a href=&quot;#做法&quot; class=&quot;headerlink&quot; title=&quot;做法&quot;&gt;&lt;/a&gt;做法&lt;/h2&gt;&lt;p&gt;很明显的最大权二分图匹配，对于G[i][j]=1,对i， j连边，边权为vi ^ vj，跑次KM算法。&lt;br&gt;
    
    </summary>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/categories/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://luoxinchen.me/tags/ACM/"/>
    
      <category term="HDU" scheme="http://luoxinchen.me/tags/HDU/"/>
    
      <category term="2016 暑期集训" scheme="http://luoxinchen.me/tags/2016-%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
      <category term="二分图匹配" scheme="http://luoxinchen.me/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>暑期集训-7-4-g</title>
    <link href="http://luoxinchen.me/2016/09/06/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD-7-4-g/"/>
    <id>http://luoxinchen.me/2016/09/06/暑期集训-7-4-g/</id>
    <published>2016-09-06T04:39:43.000Z</published>
    <updated>2016-09-06T05:12:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>K个产奶机，C头奶牛，每个产奶机最多可供M头奶牛使用。给出产奶机和奶牛之间的距离矩阵。问如何安排使得每头奶牛都有一个产奶机，并且使得奶牛到产奶机的最远距离最短。求最短距离。</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>二分最远距离，对于小于此距离的边建图，跑最大流。做法还是很裸的。<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line">/************************************************</div><div class="line"> *Author        :mathon</div><div class="line"> *Email         :luoxinchen96@gmail.com</div><div class="line">*************************************************/</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;ctime&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">using namespace std;</div><div class="line">typedef pair&lt;int, int&gt; pii;</div><div class="line">typedef long long ll;</div><div class="line">typedef unsigned long long ull;</div><div class="line">#define xx first</div><div class="line">#define lowbit(x) (x&amp;-x)</div><div class="line">#define yy second</div><div class="line">#define pr(x) cout &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; " "</div><div class="line">#define prln(x) cout &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; endl</div><div class="line">const int inf = 0x3f3f3f3f;</div><div class="line">const int maxn = 300 + 5;</div><div class="line">const int maxv = 300 + 5;</div><div class="line">int d[maxn][maxn];</div><div class="line"></div><div class="line">struct Dinic &#123;</div><div class="line">    struct edge &#123;</div><div class="line">        int to, cap, rev; </div><div class="line">        edge() &#123;&#125;</div><div class="line">        edge(int to, int cap, int rev):to(to), cap(cap), rev(rev) &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    vector&lt;edge&gt; G[maxv];</div><div class="line">    int num_v;</div><div class="line">    int level[maxv];</div><div class="line">    int iter[maxv];</div><div class="line"></div><div class="line">    void add_edge(int from, int to, int cap) &#123;</div><div class="line">        G[from].push_back(edge(to, cap, (int)G[to].size()));</div><div class="line">        G[to].push_back(edge(from, 0, (int)G[from].size() - 1));</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    void init(int num_v) &#123;</div><div class="line">        this-&gt;num_v = num_v;</div><div class="line">        for (int i = 0; i &lt;= num_v; i++) G[i].clear();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void bfs(int s) &#123;</div><div class="line">        memset(level, -1, sizeof(level));</div><div class="line">        queue&lt;int&gt; que;</div><div class="line">        level[s] = 0;</div><div class="line">        que.push(s);</div><div class="line">        while(!que.empty()) &#123;</div><div class="line">            int v = que.front(); que.pop();</div><div class="line">            for (int i = 0; i &lt; (int)G[v].size(); i++) &#123;</div><div class="line">                edge &amp;e = G[v][i];</div><div class="line">                if (e.cap &gt; 0 &amp;&amp; level[e.to] &lt; 0) &#123;</div><div class="line">                    level[e.to] = level[v] + 1;</div><div class="line">                    que.push(e.to);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int dfs(int v, int t, int f) &#123;</div><div class="line">        if (v == t) return f;</div><div class="line">        for (int &amp;i = iter[v]; i &lt; (int)G[v].size(); i++) &#123;</div><div class="line">            edge &amp;e = G[v][i];</div><div class="line">            if (e.cap &gt; 0 &amp;&amp; level[v] &lt; level[e.to]) &#123;</div><div class="line">                int d = dfs(e.to, t, min(f, e.cap));</div><div class="line">                if( d &gt; 0) &#123;</div><div class="line">                    e.cap -= d;</div><div class="line">                    G[e.to][e.rev].cap += d;</div><div class="line">                    return d;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int max_flow(int s, int t) &#123;</div><div class="line">        int flow = 0;</div><div class="line">        for (;;) &#123;</div><div class="line">            bfs(s);</div><div class="line">            if(level[t] &lt; 0) return flow;</div><div class="line">            memset(iter, 0, sizeof(iter));</div><div class="line">            int f;</div><div class="line">            while((f = dfs(s, t, inf)) &gt; 0) &#123;</div><div class="line">                flow += f;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;dinic;</div><div class="line"></div><div class="line">int K, C, M;</div><div class="line"></div><div class="line">bool judge(int x) &#123;</div><div class="line">    int s = 0, t = K + C + 1;</div><div class="line">    dinic.init(t + 1);</div><div class="line">    for (int i = 1; i &lt;= K; i++) &#123;</div><div class="line">        dinic.add_edge(i, t, M);</div><div class="line">    &#125;</div><div class="line">    for (int i = K + 1; i &lt;= K + C; i++) &#123;</div><div class="line">        dinic.add_edge(s, i, 1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (int i = 1; i &lt;= K; i++) &#123;</div><div class="line">        for (int j = K + 1; j &lt;= K + C; j++) &#123;</div><div class="line">            if(d[i][j] &lt;= x) &#123;</div><div class="line">                dinic.add_edge(j, i, 1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    return dinic.max_flow(s, t) == C;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">int main(void) &#123;</div><div class="line">#ifdef MATHON</div><div class="line">    //freopen("in.txt", "r", stdin);</div><div class="line">    //freopen("out.txt", "w", stdout);</div><div class="line">#endif</div><div class="line">    while(scanf("%d%d%d", &amp;K, &amp;C, &amp;M) == 3) &#123;</div><div class="line">        for (int i = 1; i &lt;= K + C; i++) &#123;</div><div class="line">            for (int j = 1; j &lt;= K + C; j++) &#123;</div><div class="line">                int x; scanf("%d", &amp;x);</div><div class="line">                if(x == 0) x = inf;</div><div class="line">                d[i][j] = x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int k = 1; k &lt;= K + C; k++) &#123;</div><div class="line">            for (int i = 1; i &lt;= K + C; i++) &#123;</div><div class="line">                for (int j = 1; j &lt;= K + C; j++) &#123;</div><div class="line">                    d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        int l = 0, r = inf;</div><div class="line">        while(l &lt; r - 1) &#123;</div><div class="line">            int m = (l + r) &gt;&gt; 1;</div><div class="line">            if(judge(m)) &#123;</div><div class="line">                r = m;</div><div class="line">            &#125; else l = m;</div><div class="line">        &#125;</div><div class="line">        printf("%d\n", r);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;K个产奶机，C头奶牛，每个产奶机最多可供M头奶牛使用。给出产奶机和奶牛之间的距离矩阵。问如何安排使得每头奶牛都有一个产奶机，并且使得奶牛到产奶机的最远距离最短。求最短距离。&lt;/p&gt;
&lt;h2 id=&quot;做法&quot;&gt;&lt;a href=&quot;#做法&quot; class=&quot;headerlink&quot; title=&quot;做法&quot;&gt;&lt;/a&gt;做法&lt;/h2&gt;&lt;p&gt;二分最远距离，对于小于此距离的边建图，跑最大流。做法还是很裸的。&lt;br&gt;
    
    </summary>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/categories/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://luoxinchen.me/tags/ACM/"/>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/tags/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
      <category term="二分" scheme="http://luoxinchen.me/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="POJ" scheme="http://luoxinchen.me/tags/POJ/"/>
    
      <category term="网络流" scheme="http://luoxinchen.me/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>暑期集训-7-4-f</title>
    <link href="http://luoxinchen.me/2016/09/06/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD-7-4-f/"/>
    <id>http://luoxinchen.me/2016/09/06/暑期集训-7-4-f/</id>
    <published>2016-09-06T04:09:33.000Z</published>
    <updated>2016-09-06T04:38:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>HDU 4864<br>有n个机器，m个任务。每个机器至多能完成一个任务。每个机器有个最大运行时间xi和等级yi,对于每个任务j,只有当xi&gt;=xj,yi&gt;=yj时，机器i才能完成任务j。如果完成任务可以获得$500<em>xj+2</em>yj$的金钱。问最多可以完成几个任务，出现多种情况时，最多能获得多少金钱。</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>贪心。讲任务按照二元组(x,y)，从大到小排序，机器按照y值不同装入不同的桶里，对于每个桶按照x从小到大排序。然后贪心的对任务和机器配对。<br>证明:对于当前任务j,机器i,如果存在其他任务(xk, yk)能够使用此机器，那么xj&gt;=xk，则当前任务获得金钱更多，如果不存在任务(xk, yk)能够使用此机器，那么当前完成任务数更多。<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">/************************************************</div><div class="line"> *Author        :mathon</div><div class="line"> *Email         :luoxinchen96@gmail.com</div><div class="line">*************************************************/</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;ctime&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">using namespace std;</div><div class="line">typedef pair&lt;int, int&gt; pii;</div><div class="line">typedef long long ll;</div><div class="line">typedef unsigned long long ull;</div><div class="line">#define xx first</div><div class="line">#define lowbit(x) (x&amp;-x)</div><div class="line">#define yy second</div><div class="line">#define pr(x) cout &lt;&lt; #x &lt;&lt; &quot; &quot; &lt;&lt; x &lt;&lt; &quot; &quot;</div><div class="line">#define prln(x) cout &lt;&lt; #x &lt;&lt; &quot; &quot; &lt;&lt; x &lt;&lt; endl</div><div class="line">const int maxn = 1e5 + 7;</div><div class="line">const int maxy = 100 + 5;</div><div class="line">int sta[maxy][maxn];</div><div class="line">int pos[maxy];</div><div class="line">pii task[maxn];</div><div class="line">int N, M;</div><div class="line">int main(void) &#123;</div><div class="line">#ifdef MATHON</div><div class="line">    //freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</div><div class="line">    //freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</div><div class="line">#endif</div><div class="line">    while(scanf(&quot;%d%d&quot;, &amp;N, &amp;M) == 2) &#123;</div><div class="line">        memset(pos, 0, sizeof(pos));</div><div class="line">        for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">            int x, y; scanf(&quot;%d%d&quot;, &amp;x, &amp;y);</div><div class="line">            sta[y][pos[y]++] = x;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; M; i++) &#123;</div><div class="line">            int x, y; scanf(&quot;%d%d&quot;, &amp;x, &amp;y);</div><div class="line">            task[i] = pii(x, y);</div><div class="line">        &#125;</div><div class="line">        for (int i = 0; i &lt; maxy; i++) &#123;</div><div class="line">            sort(sta[i], sta[i] + pos[i]);</div><div class="line">        &#125;</div><div class="line">        sort(task, task + M, greater&lt;pii&gt;() );</div><div class="line"></div><div class="line">        ll num = 0, money = 0;</div><div class="line">        for (int i = 0; i &lt; M; i++) &#123;</div><div class="line">            int x = task[i].xx, y = task[i].yy;</div><div class="line">            for (int j = y; j &lt;= 100; j++) &#123;</div><div class="line">                if(pos[j] &gt; 0 &amp;&amp; sta[j][pos[j] - 1] &gt;= x) &#123;</div><div class="line">                    num++;</div><div class="line">                    money += x * 500 + 2 * y;</div><div class="line">                    pos[j]--;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cout &lt;&lt; num &lt;&lt; &quot; &quot; &lt;&lt; money &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;HDU 4864&lt;br&gt;有n个机器，m个任务。每个机器至多能完成一个任务。每个机器有个最大运行时间xi和等级yi,对于每个任务j,只有当xi&amp;gt;=xj,yi&amp;gt;=yj时，机器i才能完成任务j。如果完成任务可以获得$500&lt;em&gt;xj+2&lt;/em&gt;yj$的金钱。问最多可以完成几个任务，出现多种情况时，最多能获得多少金钱。&lt;/p&gt;
&lt;h2 id=&quot;做法&quot;&gt;&lt;a href=&quot;#做法&quot; class=&quot;headerlink&quot; title=&quot;做法&quot;&gt;&lt;/a&gt;做法&lt;/h2&gt;&lt;p&gt;贪心。讲任务按照二元组(x,y)，从大到小排序，机器按照y值不同装入不同的桶里，对于每个桶按照x从小到大排序。然后贪心的对任务和机器配对。&lt;br&gt;证明:对于当前任务j,机器i,如果存在其他任务(xk, yk)能够使用此机器，那么xj&amp;gt;=xk，则当前任务获得金钱更多，如果不存在任务(xk, yk)能够使用此机器，那么当前完成任务数更多。&lt;br&gt;
    
    </summary>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/categories/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://luoxinchen.me/tags/ACM/"/>
    
      <category term="HDU" scheme="http://luoxinchen.me/tags/HDU/"/>
    
      <category term="2016 暑期集训" scheme="http://luoxinchen.me/tags/2016-%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
      <category term="贪心" scheme="http://luoxinchen.me/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>暑期集训-7-4-e</title>
    <link href="http://luoxinchen.me/2016/09/06/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD-7-4-e/"/>
    <id>http://luoxinchen.me/2016/09/06/暑期集训-7-4-e/</id>
    <published>2016-09-06T03:04:14.000Z</published>
    <updated>2016-09-06T04:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给两个字符串，有四种操作，添加，删除，修改，复制。问把第一个字符串转化为第二个的最少步数。</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>贪心<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">using namespace std;</div><div class="line">#define pr(x) cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; " " </div><div class="line">#define prln(x) cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</div><div class="line">typedef pair&lt;int, int&gt; pii;</div><div class="line">typedef long long ll;</div><div class="line">int main() &#123;</div><div class="line">#ifdef LOCAL</div><div class="line">	//freopen("in.txt", "r", stdin);</div><div class="line">	//freopen("out.txt", 'w', stdout);</div><div class="line">#endif</div><div class="line">    string s1, s2;</div><div class="line">    while(cin &gt;&gt; s1 &gt;&gt; s2) &#123;</div><div class="line">        int len1 = (int)s1.size(), len2 = (int)s2.size();</div><div class="line">        if(len1 &gt; len2) &#123;</div><div class="line">            int d = len1 - len2;</div><div class="line">            for (int i = 0; i &lt; d; i++) &#123;</div><div class="line">                printf("d %c\n", s1[i]);</div><div class="line">            &#125;</div><div class="line">            for (int i = 0; i &lt; len2; i++) &#123;</div><div class="line">                printf("m %c\n", s2[i]);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            int d = len2 - len1;</div><div class="line">            for (int i = 0; i &lt; d; i++) &#123;</div><div class="line">                printf("a %c\n", s2[i]);</div><div class="line">            &#125;</div><div class="line">            for (int i = d; i &lt; len2; i++) &#123;</div><div class="line">                printf("m %c\n", s2[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给两个字符串，有四种操作，添加，删除，修改，复制。问把第一个字符串转化为第二个的最少步数。&lt;/p&gt;
&lt;h2 id=&quot;做法&quot;&gt;&lt;a href=&quot;#做法&quot; class=&quot;headerlink&quot; title=&quot;做法&quot;&gt;&lt;/a&gt;做法&lt;/h2&gt;&lt;p&gt;贪心&lt;br&gt;
    
    </summary>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/categories/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://luoxinchen.me/tags/ACM/"/>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/tags/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
      <category term="HDU" scheme="http://luoxinchen.me/tags/HDU/"/>
    
      <category term="贪心" scheme="http://luoxinchen.me/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>暑期集训-7-4-d</title>
    <link href="http://luoxinchen.me/2016/09/05/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD-7-4-d/"/>
    <id>http://luoxinchen.me/2016/09/05/暑期集训-7-4-d/</id>
    <published>2016-09-05T08:59:44.000Z</published>
    <updated>2016-09-06T01:42:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个n*m的矩阵，其中随着时间增长会出现一些障碍，问矩阵上端和下端开始隔开的时间</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><ol>
<li>二分时间，判断是否联通</li>
<li>并查集</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><a id="more"></a>
<p>并查集代码:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">using namespace std;</div><div class="line">#define pr(x) cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; " " </div><div class="line">#define prln(x) cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</div><div class="line">typedef pair&lt;int, int&gt; pii;</div><div class="line">typedef long long ll;</div><div class="line"></div><div class="line">const int maxn = 500 + 5;</div><div class="line">int mp[maxn][maxn];</div><div class="line">struct DSU &#123;</div><div class="line">    int par[maxn*maxn], n;</div><div class="line">    void init(int n) &#123;</div><div class="line">        this-&gt;n = n;</div><div class="line">        for (int i = 0; i &lt;= n; i++) &#123;</div><div class="line">            par[i] = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int find(int x) &#123;</div><div class="line">        return x == par[x] ? x : par[x] = find(par[x]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void merge(int a, int b) &#123;</div><div class="line">        a = find(a), b = find(b);</div><div class="line">        par[b] = a;</div><div class="line">    &#125;</div><div class="line">&#125;dsu;</div><div class="line"></div><div class="line">int T, N, M, Q;</div><div class="line">char str[maxn];</div><div class="line"></div><div class="line">const int dx[] = &#123;-1, 1, 0, 0&#125;;</div><div class="line">const int dy[] = &#123;0, 0, -1, 1&#125;;</div><div class="line"></div><div class="line">int id(int x, int y) &#123;</div><div class="line">    return x * M + y + 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int s, t;</div><div class="line">void work(int x, int y) &#123;</div><div class="line">    if(x == 0) &#123;</div><div class="line">        dsu.merge(s, id(x, y));</div><div class="line">    &#125;</div><div class="line">    if(x == N - 1) &#123;</div><div class="line">        dsu.merge(t, id(x, y));</div><div class="line">    &#125;</div><div class="line">    for (int i = 0; i &lt; 4; i++) &#123;</div><div class="line">        int nx = x + dx[i], ny = y + dy[i];</div><div class="line">        if(nx &gt;= 0 &amp;&amp; nx &lt; N &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; M) &#123;</div><div class="line">            if(mp[nx][ny] == 0) &#123;</div><div class="line">                dsu.merge(id(x, y), id(nx, ny));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int qx[maxn*maxn], qy[maxn*maxn];</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">#ifdef LOCAL</div><div class="line">	//freopen("in.txt", "r", stdin);</div><div class="line">	//freopen("out.txt", 'w', stdout);</div><div class="line">#endif</div><div class="line">    scanf("%d", &amp;T);</div><div class="line">    while(T--) &#123;</div><div class="line">        scanf("%d%d", &amp;N, &amp;M);</div><div class="line">        for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">            scanf("%s", str);</div><div class="line">            for (int j = 0; j &lt; M; j++) &#123;</div><div class="line">                mp[i][j] = str[j] - '0';</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        scanf("%d", &amp;Q);</div><div class="line">        for (int i = 1; i &lt;= Q; i++) &#123;</div><div class="line">            scanf("%d%d", &amp;qx[i], &amp;qy[i]);</div><div class="line">            mp[qx[i]][qy[i]] = 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dsu.init(N*M + 1);</div><div class="line">        s = 0, t = N * M + 1;</div><div class="line">            </div><div class="line">        for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">            for (int j = 0; j &lt; M; j++) &#123;</div><div class="line">                if(mp[i][j] == 0) &#123;</div><div class="line">                    work(i, j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        if(dsu.find(s) == dsu.find(t)) &#123;</div><div class="line">            printf("-1\n");</div><div class="line">        &#125; else &#123;</div><div class="line">            int i;</div><div class="line">            for (i = Q; i &gt;= 1; i--) &#123;</div><div class="line">                mp[qx[i]][qy[i]] = 0;</div><div class="line">                work(qx[i], qy[i]);</div><div class="line">                if(dsu.find(s) == dsu.find(t)) &#123;</div><div class="line">                    printf("%d\n", i);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if(i == 0) &#123;</div><div class="line">                printf("0\n");</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一个n*m的矩阵，其中随着时间增长会出现一些障碍，问矩阵上端和下端开始隔开的时间&lt;/p&gt;
&lt;h2 id=&quot;做法&quot;&gt;&lt;a href=&quot;#做法&quot; class=&quot;headerlink&quot; title=&quot;做法&quot;&gt;&lt;/a&gt;做法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;二分时间，判断是否联通&lt;/li&gt;
&lt;li&gt;并查集&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;
    
    </summary>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/categories/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://luoxinchen.me/tags/ACM/"/>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/tags/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
      <category term="HDU" scheme="http://luoxinchen.me/tags/HDU/"/>
    
      <category term="并查集" scheme="http://luoxinchen.me/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="二分" scheme="http://luoxinchen.me/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>暑期集训-7-4-c</title>
    <link href="http://luoxinchen.me/2016/09/05/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD-7-4-c/"/>
    <id>http://luoxinchen.me/2016/09/05/暑期集训-7-4-c/</id>
    <published>2016-09-05T08:32:39.000Z</published>
    <updated>2016-09-06T01:40:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>POJ 2912<br>n个人玩石头剪刀布，其中有一个人是裁判，剩下的人分成3组，每一组的人出同一手形，裁判可以人溢出。问能否判断谁是裁判。</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>枚举裁判，并查集判断</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">using namespace std;</div><div class="line">#define pr(x) cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; " " </div><div class="line">#define prln(x) cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</div><div class="line">typedef pair&lt;int, int&gt; pii;</div><div class="line">typedef long long ll;</div><div class="line"></div><div class="line">const int maxn = 500 + 5;</div><div class="line">const int maxm = 2000 + 5;</div><div class="line">struct DSU &#123;</div><div class="line">    int par[maxn], r[maxn], n;</div><div class="line">    void init(int n) &#123;</div><div class="line">        this-&gt;n = n;</div><div class="line">        for (int i = 0; i &lt;= n; i++) &#123;</div><div class="line">            par[i] = i; r[i] = 0;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    int find(int x) &#123;</div><div class="line">        if(x != par[x]) &#123;</div><div class="line">            int fx = par[x];</div><div class="line">            par[x] = find(par[x]);</div><div class="line">            r[x] = (r[x] + r[fx]) % 3;</div><div class="line">        &#125;</div><div class="line">        return par[x];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bool merge(int x, int y, int t) &#123;</div><div class="line">        int fx = find(x), fy = find(y);</div><div class="line">        if(fx == fy) &#123;</div><div class="line">            if((r[y] + t) % 3 != r[x]) return false;</div><div class="line">            else return true;</div><div class="line">        &#125; else &#123;</div><div class="line">            par[fx] = fy;</div><div class="line">            r[fx] = (r[y] -r[x] + t + 3) % 3;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;dsu;</div><div class="line"></div><div class="line">int N, M;</div><div class="line">int err[maxn], maxerr, cnt;</div><div class="line">int U[maxm], V[maxm], T[maxm];</div><div class="line">int main() &#123;</div><div class="line">#ifdef LOCAL</div><div class="line">	//freopen("in.txt", "r", stdin);</div><div class="line">	//freopen("out.txt", 'w', stdout);</div><div class="line">#endif</div><div class="line">    while(scanf("%d%d", &amp;N, &amp;M) != EOF) &#123;</div><div class="line">        for (int i = 0; i &lt; M; i++) &#123;</div><div class="line">            char c;</div><div class="line">            // scanf("%d%c%d", &amp;U[i], &amp;c, &amp;V[i]);</div><div class="line">            scanf("%d", &amp;U[i]);</div><div class="line">            while((c = getchar()) == ' ');</div><div class="line">            scanf("%d", &amp;V[i]);</div><div class="line">            if(c == '=') T[i] = 0;</div><div class="line">            if(c == '&lt;') T[i] = 1;</div><div class="line">            if(c == '&gt;') T[i] = 2;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        maxerr = 0, cnt = 0;</div><div class="line">        int res = 0;</div><div class="line">        memset(err, -1, sizeof(err));</div><div class="line">        for (int judge = 0; judge &lt; N; judge++) &#123;</div><div class="line">            dsu.init(N);</div><div class="line">            for (int i = 0; i &lt; M; i++) &#123;</div><div class="line">                int x = U[i], y = V[i], t = T[i];</div><div class="line">                if(x == judge || y == judge) continue;</div><div class="line">                if(!dsu.merge(x, y, t)) &#123;</div><div class="line">                    err[judge] = i + 1;</div><div class="line">                    maxerr = max(maxerr, err[judge]);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if(err[judge] == -1) &#123;</div><div class="line">                cnt++;</div><div class="line">                res = judge;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if(cnt == 0) &#123;</div><div class="line">            printf("Impossible\n");</div><div class="line">        &#125; else if(cnt == 1) &#123;</div><div class="line">            printf("Player %d can be determined to be the judge after %d lines\n", res, maxerr);</div><div class="line">        &#125; else if(cnt &gt; 1) &#123;</div><div class="line">            printf("Can not determine\n");</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;POJ 2912&lt;br&gt;n个人玩石头剪刀布，其中有一个人是裁判，剩下的人分成3组，每一组的人出同一手形，裁判可以人溢出。问能否判断谁是裁判。&lt;/p&gt;
&lt;h2 id=&quot;做法&quot;&gt;&lt;a href=&quot;#做法&quot; class=&quot;headerlink&quot; title=&quot;做法&quot;&gt;&lt;/a&gt;做法&lt;/h2&gt;&lt;p&gt;枚举裁判，并查集判断&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;
    
    </summary>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/categories/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://luoxinchen.me/tags/ACM/"/>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/tags/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
      <category term="POJ" scheme="http://luoxinchen.me/tags/POJ/"/>
    
      <category term="DSU" scheme="http://luoxinchen.me/tags/DSU/"/>
    
  </entry>
  
  <entry>
    <title>暑期集训-7-4-b</title>
    <link href="http://luoxinchen.me/2016/09/05/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD-7-4-b/"/>
    <id>http://luoxinchen.me/2016/09/05/暑期集训-7-4-b/</id>
    <published>2016-09-05T07:40:39.000Z</published>
    <updated>2016-09-05T08:13:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>SOJ 3596<br>KMP 水题<br><a id="more"></a></p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>kmp</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">/************************************************</div><div class="line"> *Author        :mathon</div><div class="line"> *Email         :luoxinchen96@gmail.com</div><div class="line">*************************************************/</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;ctime&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">using namespace std;</div><div class="line">typedef pair&lt;int, int&gt; pii;</div><div class="line">typedef long long ll;</div><div class="line">typedef unsigned long long ull;</div><div class="line">#define xx first</div><div class="line">#define lowbit(x) (x&amp;-x)</div><div class="line">#define yy second</div><div class="line">#define pr(x) cout &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; " "</div><div class="line">#define prln(x) cout &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; endl</div><div class="line">const int mod = 835672545;</div><div class="line">const int maxn = 1000 + 5;</div><div class="line">char words[maxn][maxn];</div><div class="line">char str[maxn];</div><div class="line">int match[maxn][maxn];</div><div class="line">int n;</div><div class="line">int dp[maxn];</div><div class="line">int wordlen[maxn];</div><div class="line">int lenstr;</div><div class="line"></div><div class="line">struct KMP &#123;</div><div class="line">    int nxt[maxn];</div><div class="line">    void get_next(int words_num) &#123;</div><div class="line">        char *s = words[words_num];</div><div class="line">        int len = wordlen[words_num];</div><div class="line">        int i, k;</div><div class="line">        nxt[0] = k = -1;</div><div class="line">        for (i = 0; i &lt; len;) &#123;</div><div class="line">            if(k == -1 || s[i] == s[k]) &#123;</div><div class="line">                k++; i++;</div><div class="line">                nxt[i] = k;</div><div class="line">            &#125; else k = nxt[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void solve(int words_num) &#123;</div><div class="line">        char *w = words[words_num];</div><div class="line">        int lw = wordlen[words_num], lstr = lenstr;</div><div class="line">        int j = 0;</div><div class="line">        for (int i = 0; i &lt; lstr;) &#123;</div><div class="line">            if(j == -1 || w[j] ==str[i]) &#123;</div><div class="line">                i++; j++;</div><div class="line">                if(j == lw) &#123;</div><div class="line">                    match[words_num][i-1] = 1;</div><div class="line">                    j = nxt[j];</div><div class="line">                    // pr(j);</div><div class="line">                    // pr(words_num), prln(i);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                j = nxt[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;kmp;</div><div class="line"></div><div class="line">int main(void) &#123;</div><div class="line">#ifdef MATHON</div><div class="line">    //freopen("in.txt", "r", stdin);</div><div class="line">    //freopen("out.txt", "w", stdout);</div><div class="line">#endif</div><div class="line">    int T; scanf("%d", &amp;T);</div><div class="line">    for (int Cas = 1; Cas &lt;= T; Cas++) &#123;</div><div class="line">        scanf("%d", &amp;n);</div><div class="line">        for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">            scanf("%s", words[i]);</div><div class="line">            wordlen[i] = strlen(words[i]);</div><div class="line">        &#125;</div><div class="line">        scanf("%s", str);</div><div class="line">        lenstr = strlen(str);</div><div class="line">        memset(match, 0, sizeof(match));</div><div class="line">        for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">            kmp.get_next(i);</div><div class="line">            kmp.solve(i);</div><div class="line">        &#125;</div><div class="line">        memset(dp, 0, sizeof(dp));</div><div class="line">        dp[0] = 1;</div><div class="line">        int len = strlen(str);</div><div class="line">        for (int i = 1; i &lt;= len; i++) &#123;</div><div class="line">            for (int j = 0; j &lt; n; j++) &#123;</div><div class="line">                if(match[j][i-1]) &#123;</div><div class="line">                    dp[i] = (dp[i] + dp[i-wordlen[j]]) % mod;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        printf("%d\n", dp[len]);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;SOJ 3596&lt;br&gt;KMP 水题&lt;br&gt;
    
    </summary>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/categories/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://luoxinchen.me/tags/ACM/"/>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/tags/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
      <category term="LightOJ" scheme="http://luoxinchen.me/tags/LightOJ/"/>
    
  </entry>
  
  <entry>
    <title>暑期集训-7-4-a</title>
    <link href="http://luoxinchen.me/2016/09/05/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD-7-4-a/"/>
    <id>http://luoxinchen.me/2016/09/05/暑期集训-7-4-a/</id>
    <published>2016-09-05T07:40:39.000Z</published>
    <updated>2016-09-05T08:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>LightOJ 1027</p>
<blockquote>
<p>N 扇门，若这扇门权值xi为正，则花费|xi|的时间走出迷宫，否则花费|xi|时间回到原地。<br>求走出迷宫的期望。<br><a id="more"></a></p>
</blockquote>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>简单期望题</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">using namespace std;</div><div class="line">#define pr(x) cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; " " </div><div class="line">#define prln(x) cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</div><div class="line">typedef pair&lt;int, int&gt; pii;</div><div class="line">typedef long long ll;</div><div class="line"></div><div class="line">int gcd(int a, int b) &#123;</div><div class="line">    return b == 0 ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">#ifdef LOCAL</div><div class="line">	//freopen("in.txt", "r", stdin);</div><div class="line">	//freopen("out.txt", 'w', stdout);</div><div class="line">#endif</div><div class="line">    int T;</div><div class="line">    scanf("%d", &amp;T);</div><div class="line">    for (int Cas = 1; Cas &lt;= T; Cas++) &#123;</div><div class="line">        int n;</div><div class="line">        scanf("%d", &amp;n);</div><div class="line">        int a = 0, suma = 0, b = 0, sumb = 0;</div><div class="line">        for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">            int x;</div><div class="line">            scanf("%d", &amp;x);</div><div class="line">            if(x &gt; 0) &#123;</div><div class="line">                a++; suma += x;</div><div class="line">            &#125; else &#123;</div><div class="line">                b++; sumb += -x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        int p = suma + sumb;</div><div class="line">        int q = n - b;</div><div class="line">        printf("Case %d: ", Cas);</div><div class="line">        if(q == 0) &#123;</div><div class="line">            printf("inf\n");</div><div class="line">        &#125; else &#123;</div><div class="line">            int g = gcd(p, q);</div><div class="line">            printf("%d/%d\n", p / g, q / g);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;LightOJ 1027&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;N 扇门，若这扇门权值xi为正，则花费|xi|的时间走出迷宫，否则花费|xi|时间回到原地。&lt;br&gt;求走出迷宫的期望。&lt;br&gt;
    
    </summary>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/categories/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://luoxinchen.me/tags/ACM/"/>
    
      <category term="2016暑期集训" scheme="http://luoxinchen.me/tags/2016%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>斜率优化小结</title>
    <link href="http://luoxinchen.me/2016/05/10/2016-05-10-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96%E5%B0%8F%E7%BB%93/"/>
    <id>http://luoxinchen.me/2016/05/10/2016-05-10-斜率优化小结/</id>
    <published>2016-05-10T13:06:00.000Z</published>
    <updated>2016-09-05T08:10:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h2><p>在写斜率优化之前，我们来回顾一下单调队列优化的dp</p>
<ol>
<li>对于如下形式的dp方程<br>$$dp[i] = min{dp[j] + f(j)} (0 &lt; j &lt; i)$$<br>我们直接用一个变量维护(0, i)中dp[j] + f(j)的最小值即可</li>
</ol>
<p>2.对于如下形式的dp方程<br>$$dp[i] = min{dp[j] + f(j)} (i - m &lt; j &lt; i)$$<br>我们可以用一个单调队列维护一个(i - m, j)中dp[j] + f(j)的最小值，然后做到O(1)转移。</p>
<a id="more"></a>
<h2 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h2><h3 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h3><p>但是对于形如<br>$$dp[i] = min{dp[j] + f(i, j)} $$<br>的方程，无法做到O(1)计算$dp[j] + f(i, j)$的最小值，这时就需要斜率优化这个技巧来解决这个问题了。<br>令k &lt; j &lt; i，当我们更新dp[i]时，如果有dp[j] + f(i, j) 比dp[k] + f(i, k)更优，则有dp[j] + f(i, j) - (dp[k] + f(i, k) &lt; 0，对于这个不等式如果能够化解成如下形式<br>$$\frac {Y(j) - Y(k)} { X(j) - X(k)} &lt; f(i)$$<br>我们就能通过斜率优化这个dp了。<br>让我们来举一个例子: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3507" target="_blank" rel="external">hdu3507</a>  dp方程为<br>$$dp[i] = min{dp[j] + M + (sum[i] - sum[j])^2 (0 &lt; j &lt; i)}$$<br>令k &lt; j &lt; i，当有<br>$$dp[j] + M + (sum[i] - sum[j])^2 - (dp[k] + M + (sum[i] - sum[k])^2) &lt; 0  $$<br>从j转移到i, 比从k转移到i更优，变换此不等式可得:<br>$$\frac{(dp[j]+ sum[j]^2) - (dp[k] + sum[k]^2)}{sum[j] - sum[k]} &lt; 2sum[i]$$<br>令$Y(i) = dp[i] + sum[i]^2$, $X(i) = sum[i]$, $f(i) = 2sum[i]$则将此不等式化解为上述形式。</p>
<h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法:"></a>优化方法:</h3><p>可以发现，若满足$\frac {Y(j) - Y(k)} { X(j) - X(j)} &lt; f(i)$则j转移到i，比k转移到i更优，如果我们把(X(j), Y(j)), (X(k), Y(k))当成平面上的两个点Pj, Pk，这个不等式的含义即为若$ \overrightarrow{PjPk}$的斜率＜f(i)则，从j转移更优。<br>令grad(i, j)表示$\overrightarrow{PiPj}$的斜率，现在我们假设grad(i,j) &lt; grad(j, k)，若grad(i, j) &lt; f(I),则i比j更优，若grad(i, j) &gt; f(I), 则grad(j, k) &gt; f(I),那么从k转移比从j转移更优，当grad(i, j) &lt; grad(j, k)的时候，无论如何j转移到i都不会是最优。而这种情况恰好对应下图<br><img src="http://img.blog.csdn.net/20160510205214742" alt="这里写图片描述"><br>所以这种情况时，我们可以直接把j点删除，最后能够转移的点集只会存在这种图形，<img src="http://img.blog.csdn.net/20160510205342117" alt="这里写图片描述"><br>所以最后我们维护一个上凸集即可。<br>但是此时我们还是没有解决最终问题，如何才能找到转移到i点的最优的点呢。可以发现最后的点集一定是一个凸集，也就是斜率单调！！这样对于k &lt; j, grad(j,k) &lt; f(i),时更优，从图形特点我们可以发现如果j比k优，那么j点比所有比k小的点都优，所以对于每一个f(i),我们维护一个所有比i点小的凸集，二分查找斜率比f(i)小的编号最大的点，就是最优的转移点。如果f(i)也满足单调性，比如这道题，我们还可以直接维护一个单调队列就能解决这个问题。</p>
<h3 id="分治做法"><a href="#分治做法" class="headerlink" title="分治做法"></a>分治做法</h3><p>对于f(i)单调的这种情况，除了使用单调队列优化的斜率优化做，我们还有另外一种分治的做法，但是复杂度会变成O(nlogn) 比O(n)差。<br>当f(i)单调的时候，我们可以发现若a &gt; b,则f(a) &gt; f(b),设转移到a的最优点是c，转移到b的最优点是d，一定有c &gt; d。也就是转移到a的最优点一定大于等于转移到b的最优点。考虑这样的分治</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dl, <span class="keyword">int</span> dr)</span> </span>&#123;</div><div class="line">	<span class="comment">//[l,r]表示现在更新[l,r]区间dp[i]的最优值</span></div><div class="line">	<span class="comment">//用j -&gt; f(i),表示j是更新f(i)最优值的最优点</span></div><div class="line">	<span class="comment">//那么[dl,dr]表示更新dp([l,r])的点，一定在[dl,dr]范围内</span></div><div class="line">	<span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; </div><div class="line">	<span class="keyword">int</span> dm = dl;</div><div class="line">	<span class="keyword">int</span> g = inf;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = dl; i &lt;= dr; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(g &lt; dp[i] + f(i, mid)) &#123;</div><div class="line">			g = dp[i] + f(i, mid);<span class="comment">//记录更新dp[mid]的最优</span></div><div class="line">			dm = i;<span class="comment">//记录更新dp[mid]的最优点</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	dp[mid] = g; <span class="comment">//更新dp[mid]的值</span></div><div class="line">	<span class="comment">//因为上文叙述的单调性，</span></div><div class="line">	<span class="comment">//更新[l,mid-1]的最优点，一定在[dl,dm]范围内</span></div><div class="line">	<span class="keyword">if</span>(l &lt; mid) dfs(l, mid - <span class="number">1</span>, dl, dm);</div><div class="line">	<span class="comment">//更新[mid+1,r]的最优点，一定在[dm,dr]范围内</span></div><div class="line">	<span class="keyword">if</span>(mid &lt; r) dfs(mid + <span class="number">1</span>, r, dm, dr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现这个分治比起斜率优化，不仅写起来方便很多，并且适用的范围也更广。这个做法不局限于斜率单调，可以发现只要满足c是更新f(a)的最优点，d是更新f(b)的最优点，若a &gt; b 一定有 c &gt; d，则可以有这个分治做。</p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h2><p>这个做法是我在<a href="http://codeforces.com/contest/674/problem/C" target="_blank" rel="external">codeforces 674E</a>,跟Claris神犇的代码学会的<a href="http://codeforces.com/contest/674/submission/17794311" target="_blank" rel="external">solution</a>,在此特地感谢Claris.这个做法着实是非常的劲啊！多一个log，但是换来编码复杂度和通用性更广的解法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单调队列优化&quot;&gt;&lt;a href=&quot;#单调队列优化&quot; class=&quot;headerlink&quot; title=&quot;单调队列优化&quot;&gt;&lt;/a&gt;单调队列优化&lt;/h2&gt;&lt;p&gt;在写斜率优化之前，我们来回顾一下单调队列优化的dp&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于如下形式的dp方程&lt;br&gt;$$dp[i] = min{dp[j] + f(j)} (0 &amp;lt; j &amp;lt; i)$$&lt;br&gt;我们直接用一个变量维护(0, i)中dp[j] + f(j)的最小值即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.对于如下形式的dp方程&lt;br&gt;$$dp[i] = min{dp[j] + f(j)} (i - m &amp;lt; j &amp;lt; i)$$&lt;br&gt;我们可以用一个单调队列维护一个(i - m, j)中dp[j] + f(j)的最小值，然后做到O(1)转移。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://luoxinchen.me/categories/ACM/"/>
    
      <category term="DP" scheme="http://luoxinchen.me/categories/ACM/DP/"/>
    
    
      <category term="ACM" scheme="http://luoxinchen.me/tags/ACM/"/>
    
      <category term="dp" scheme="http://luoxinchen.me/tags/dp/"/>
    
      <category term="斜率优化" scheme="http://luoxinchen.me/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 652E Pursuit For Artifacts(Tarjan 缩点)</title>
    <link href="http://luoxinchen.me/2016/03/30/2016-03-30-Codeforces652EPursuitForArtifacts(Tarjan%E7%BC%A9%E7%82%B9)/"/>
    <id>http://luoxinchen.me/2016/03/30/2016-03-30-Codeforces652EPursuitForArtifacts(Tarjan缩点)/</id>
    <published>2016-03-30T07:14:00.000Z</published>
    <updated>2016-08-08T14:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Codeforces 652E Pursuit For Artifacts(Tarjan 缩点)<br>[TOC]</p>
<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><blockquote>
<p>有n个岛，m座桥，某些桥上有宝藏，每条桥只能经过一次，给出起点岛a和终点岛b，问能否从a走到b并带走至&gt;少一个宝藏。</p>
</blockquote>
<a id="more"></a>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>这道竟然是我的tarjan算法入门题，用tarjan缩点为树，如果是缩点后包含宝藏把这个点的权值设为非0，如果是桥，保留原来的权值，因为缩点后是一棵树，所以直接dfs找到从a到b的路径，看路径中是否含权值非零的点或边即可。</p>
<h2 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h2><p>在比赛时自己也是想了很多个解法的，但是最多也就跑过了第12组数据，看到了这个思路感觉确实很巧妙，看到某个大牛总结的，边只能走一次的这种情况大多需要用tarjan缩点为树。这道题学弟竟然用其他方法给ac，确实佩服。这道题也算是我学Tarjan后ac的第一道题吧，Tarjan算法着实是很优美！</p>
<h2 id="AC-CODE："><a href="#AC-CODE：" class="headerlink" title="AC CODE："></a>AC CODE：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">struct</span> Edge &#123;</div><div class="line">    <span class="keyword">int</span> v, c;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], isin[maxn], id[maxn], dfsNum, bcc;</div><div class="line"><span class="keyword">int</span> stk[maxn], top;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; T[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    dfn[u] = low[u] = ++dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">    isin[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (Edge e: G[u]) &#123;</div><div class="line">        <span class="keyword">int</span> v = e.v;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v, u);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125; <span class="keyword">else</span> low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[u] == dfn[u]) &#123;</div><div class="line">        ++bcc;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> v = stk[top--];</div><div class="line">            isin[v] = <span class="literal">false</span>;</div><div class="line">            id[v] = bcc;</div><div class="line">            <span class="keyword">if</span>(v == u) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_init</span><span class="params">()</span> </span>&#123;</div><div class="line">     bcc = dfsNum = <span class="number">0</span>;</div><div class="line">     <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</div><div class="line">     tarjan(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> fa, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(s == t) <span class="keyword">return</span> sum + val[t];</div><div class="line">    <span class="keyword">for</span> (Edge e: T[s]) &#123;</div><div class="line">         <span class="keyword">int</span> v = e.v;</div><div class="line">         <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">         <span class="keyword">if</span>(dfs(v, t, s, sum + e.c +val[v])) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">        <span class="keyword">int</span> u, v, c;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</div><div class="line">        G[u].push_back(&#123;v, c&#125;);</div><div class="line">        G[v].push_back(&#123;u, c&#125;);</div><div class="line">    &#125;</div><div class="line">    tarjan_init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">         <span class="keyword">int</span> u = id[i];</div><div class="line">         <span class="keyword">for</span> (Edge e: G[i]) &#123;</div><div class="line">             <span class="keyword">int</span> v = id[e.v];</div><div class="line">             <span class="keyword">if</span>(u == v) val[u] += e.c;</div><div class="line">             <span class="keyword">else</span> T[u].push_back(&#123;v, e.c&#125;);</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> s, t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</div><div class="line">    <span class="built_in">puts</span>(dfs(id[s], id[t], <span class="number">-1</span>, val[id[s]]) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Codeforces 652E Pursuit For Artifacts(Tarjan 缩点)&lt;br&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;题意：&quot;&gt;&lt;a href=&quot;#题意：&quot; class=&quot;headerlink&quot; title=&quot;题意：&quot;&gt;&lt;/a&gt;题意：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有n个岛，m座桥，某些桥上有宝藏，每条桥只能经过一次，给出起点岛a和终点岛b，问能否从a走到b并带走至&amp;gt;少一个宝藏。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hihocoder *Divisors*</title>
    <link href="http://luoxinchen.me/2016/03/18/2016-03-18-hihocoder*Divisors*/"/>
    <id>http://luoxinchen.me/2016/03/18/2016-03-18-hihocoder*Divisors*/</id>
    <published>2016-03-18T12:26:00.000Z</published>
    <updated>2016-08-08T14:17:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hihocoder-Divisors"><a href="#hihocoder-Divisors" class="headerlink" title="hihocoder Divisors"></a>hihocoder <em>Divisors</em></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>   给定一个N，求不超过N的正整数中因子最多的数。如果有多个答案，输出最小的一个。</p>
</blockquote>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><p>最近做题可以明显发现自己的思维缺陷，容易陷入思维定式，看到这道题时，一眼觉得是个数论题，然后开始找质因数分解瞎猜结论，并没有仔细观察性质，最后这是一个搜索题，看了题解确实不难，性质也很容易发现，但是并没有认真去思考，解法确实很妙！<a href="http://hihocoder.com/discuss/question/2857/" target="_blank" rel="external">官方题解</a>写的非常好了，这里就不再累述。</p>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code:"></a>AC Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line">ll n;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">bool</span> is_prime[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</div><div class="line"></div><div class="line">ll maxdivisors, result;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_prime</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(is_prime, <span class="literal">true</span>, <span class="keyword">sizeof</span>(is_prime));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(is_prime[i]) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; maxn; j += i) &#123;</div><div class="line">                is_prime[j] = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (is_prime[i]) prime.push_back(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> prime_num, ll divisors, ll now, <span class="keyword">int</span> lastNi)</span> </span>&#123;</div><div class="line"><span class="comment">//    cout &lt;&lt; prime[prime_num] &lt;&lt; " " &lt;&lt; divisors &lt;&lt; " " &lt;&lt; now &lt;&lt; endl;</span></div><div class="line">    <span class="keyword">if</span> (prime[prime_num] &gt; n) &#123;</div><div class="line">         <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (divisors &gt; maxdivisors || (divisors == maxdivisors &amp;&amp; now &lt; result)) &#123;</div><div class="line">        maxdivisors = divisors;</div><div class="line">        result = now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; <span class="keyword">double</span>(now)*prime[prime_num] &lt; <span class="keyword">double</span>(n) + eps &amp;&amp; i &lt;= lastNi; i++) &#123;</div><div class="line">        now *= prime[prime_num];</div><div class="line">        dfs(prime_num + <span class="number">1</span>, divisors*(i + <span class="number">1</span>), now, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    make_prime();</div><div class="line">    maxdivisors = <span class="number">1</span>, result = <span class="number">1</span>;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, inf);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hihocoder-Divisors&quot;&gt;&lt;a href=&quot;#hihocoder-Divisors&quot; class=&quot;headerlink&quot; title=&quot;hihocoder Divisors&quot;&gt;&lt;/a&gt;hihocoder &lt;em&gt;Divisors&lt;/em&gt;&lt;/h1&gt;&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;   给定一个N，求不超过N的正整数中因子最多的数。如果有多个答案，输出最小的一个。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>约瑟夫环问题</title>
    <link href="http://luoxinchen.me/2016/03/13/2016-03-13-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://luoxinchen.me/2016/03/13/2016-03-13-约瑟夫环问题/</id>
    <published>2016-03-13T03:15:00.000Z</published>
    <updated>2016-08-08T14:17:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>#约瑟夫环问题</p>
<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><blockquote>
<p>n个人围成一个圆圈依次编号为0,1,…,n-1，从第一个人开始，依次报数1, 2,…,k-1,报到k的人退出，从退出的下一个人开始继续从1报数，仍然报到k的人退出，问最后留下的人是谁。</p>
</blockquote>
<a id="more"></a>
<h3 id="朴素解法："><a href="#朴素解法：" class="headerlink" title="朴素解法："></a>朴素解法：</h3><p>这是一个c语言入门题，我们可以用数组或者链表来模拟整个过程得到最终结果。但是这样复杂度为O(n^2)，当n较大时没法算出结果。</p>
<h3 id="数学解法："><a href="#数学解法：" class="headerlink" title="数学解法："></a>数学解法：</h3><p>先来模拟一下过程，当n ＝ 8，k ＝ 3时</p>
<ol>
<li><p><strong>n = 8, k = 3</strong></p>
<blockquote>
<p><code>0 1 2 3 4 5 6 7</code><br>第一次编号为2的退出</p>
</blockquote>
</li>
<li><p><strong>n = 7, k = 3</strong></p>
<blockquote>
<p><code>0 1 3 4 5 6 7</code><br>这次将从3开始数，从新进行编号<br><code>3 4 5 6 7 0 1     (A)</code><br><code>0 1 2 3 4 5 6    (B)</code><br>可以发现从(B)式到(A)式有(A) = ((B) + k)%(n+1)</p>
</blockquote>
</li>
</ol>
<p>可以继续模拟下去，可以发现这个公式始终满足，显然我们知道当n==1的时候，最后留下的肯定为0，所以我们可以根据这个公式自底向上的计算下去了。</p>
<p>###代码：<br><strong>递归版本</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> (fun(n - <span class="number">1</span>, k) + k) % n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>循环版本</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">		f[i] = (f[i<span class="number">-1</span>] + k) % n;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显当有多次查询的时候，使用循环版本把答案一次算完可以避免重复计算，当然递归版本记忆化也是可以的。</p>
<h3 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h3><p>当然朴素的约瑟夫环肯定是一个送分题，这周bc就有一个简单拓展题目<br><a href="http://bestcoder.hdu.edu.cn/contests/contest_chineseproblem.php?cid=677&amp;pid=1004" target="_blank" rel="external">King’s Game</a><br><code>为了铭记历史，国王准备在阅兵的间隙玩约瑟夫游戏。它召来了 n(1\le n\le 5000)n(1≤n≤5000) 个士兵，逆时针围成一个圈，依次标号 1, 2, 3 ... n1,2,3...n。
第一轮第一个人从 11 开始报数，报到 11 就停止且报到 11 的这个人出局。
第二轮从上一轮出局的人的下一个人开始从 11 报数，报到 22 就停止且报到 22 的这个人出局。
第三轮从上一轮出局的人的下一个人开始从 11 报数，报到 33 就停止且报到 33 的这个人出局。
第 n - 1n−1 轮从上一轮出局的人的下一个人开始从 11 报数，报到 n - 1n−1 就停止且报到 n - 1n−1 的这个人出局。
最后剩余的人是幸存者，请问这个人的标号是多少？</code></p>
<p>如果理解朴素的约瑟夫环话，可以发现这里就是一个简单的递推变化，同样定义$f(n, k)$为有n个人时，第k个人退出剩下的人的编号，$f(n,k) = (f(n - 1, k + 1) + k) % n$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> (f(n - <span class="number">1</span>, k + <span class="number">1</span>) + k) % n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>复杂度O(n)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#约瑟夫环问题&lt;/p&gt;
&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;n个人围成一个圆圈依次编号为0,1,…,n-1，从第一个人开始，依次报数1, 2,…,k-1,报到k的人退出，从退出的下一个人开始继续从1报数，仍然报到k的人退出，问最后留下的人是谁。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VIM YouCompleteMe 插件安装</title>
    <link href="http://luoxinchen.me/2016/01/23/2016-01-23-VIMYouCompleteMe%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://luoxinchen.me/2016/01/23/2016-01-23-VIMYouCompleteMe插件安装/</id>
    <published>2016-01-23T13:06:16.000Z</published>
    <updated>2016-08-08T14:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>安装Bundle 插件</li>
<li>用 Bundle 插件安装 YouCompleteMe</li>
<li>换到YouCompleteMe目录 使用 install.py 安装，—clang-completer 获得c语言支持</li>
<li>YouCompleteMe 还需要 ycm_extra_conf.py，到github上下载</li>
<li>ycm_extra_conf.py 需要用到 /usr/include 目录，但是mac上默认没有，需要Xcode Commond Line Tool工具的支持，用xcode-select —install 命令安装即可。反复安装了3次没有成功，就跪在这个坑上了。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;安装Bundle 插件&lt;/li&gt;
&lt;li&gt;用 Bundle 插件安装 YouCompleteMe&lt;/li&gt;
&lt;li&gt;换到YouCompleteMe目录 使用 install.py 安装，—clang-completer 获得c语言支持&lt;/li&gt;
&lt;li&gt;YouC
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 3711 Mountain Road</title>
    <link href="http://luoxinchen.me/2015/11/06/2015-11-06-SOJ3711MountainRoad/"/>
    <id>http://luoxinchen.me/2015/11/06/2015-11-06-SOJ3711MountainRoad/</id>
    <published>2015-11-06T07:39:26.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.scu.edu.cn/soj/problem.action?id=3711" target="_blank" rel="external">SOJ3711</a><br><strong>题意</strong>:这件题意的有点坑。有一条单向道，依次有车到达路的两边，同一方向的车经过同一个地点的时间间隔不能少于10s，不同方向的车，必须等到道路没车才能通过。并且同一个方向的车不能改变车的顺序。之所以说题意有点坑是因为题目中有这样一句话”provided it is not slowed down by other cars in front“,如果把这句话理解为每辆车只能匀速通过会出现问题。见下面分析。<br><strong>分析</strong>:见第二个样例,<br>&gt;</p>
<blockquote>
<p>输入：<br>4<br>A 0 100<br>B 50 100<br>A 100 1<br>A 170 100<br>输出：<br>270</p>
</blockquote>
<p>如果每辆车都只能匀速通过的话，可以发现，270s无论什么方案都是不能得到的，这里的270s应该是这样得到的，先过第二辆车，这个时候，第二辆车走完的时刻是150s，再通过第一辆，此时出发时间是150s，到达时间是250s，再通过第三辆，可以发现，如果必须是匀速，因为连续的两辆车通过同一个地点的间隔不能小于10s，所以他必须在前面一辆到达的250s之后的10s 260s到达，如果按照匀速这个假设，它只能在时刻259s的时候出发，所以下一辆只能在269s的时刻出发了。如果没有匀速的限制条件，第三辆车载160s的时刻出发，可以在260s的时候到达，第四俩车在170s的时刻出发，刚好就在270s的时刻到达了，也就是样例所示。</p>
<p>现在可以考虑定理dp[i][j][A/B]为当通过前i辆A方向的车，和j辆B方向的车，最后一辆车的方向是A/B的时候最短时间。如果这道题的题意是每辆车只能是匀速，那么dp[i][j][A/B]的时间可以从dp[i-1][j][A/B]转移而来，但是这里因为不是匀速直接这样转移会出问题。所以可以这样来跟新，对于每一个i，j都当成是一个间断点，也就是刚好车辆”反向”的点，然后去更新后面都是顺序通过的点，这样就能保证最后一定是最优的结果。如果还是不能理解，参考代码吧。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">struct</span> Car &#123;</div><div class="line">    <span class="keyword">int</span> s, d;</div><div class="line">    Car() &#123;&#125;</div><div class="line">    Car(<span class="keyword">int</span> s, <span class="keyword">int</span> d):s(s), d(d) &#123;&#125;</div><div class="line">&#125;;</div><div class="line">Car A[maxn], B[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= p; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= q; j++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</div><div class="line">                dp[i][j][k] = inf;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= p; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= q; j++) &#123;</div><div class="line">            <span class="keyword">int</span> s = dp[i][j][<span class="number">0</span>], t = s;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= q; k++) &#123;</div><div class="line">                s = max(s, B[k<span class="number">-1</span>].s);</div><div class="line">                t = max(t, s + B[k<span class="number">-1</span>].d);</div><div class="line">                dp[i][k][<span class="number">1</span>] = min(dp[i][k][<span class="number">1</span>], t);</div><div class="line">                s += <span class="number">10</span>; t += <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            s = dp[i][j][<span class="number">1</span>];</div><div class="line">            t = s;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= p; k++) &#123;</div><div class="line">                s = max(s, A[k<span class="number">-1</span>].s);</div><div class="line">                t = max(t, s + A[k<span class="number">-1</span>].d);</div><div class="line">                dp[k][j][<span class="number">0</span>] = min(dp[k][j][<span class="number">0</span>], t);</div><div class="line">                s += <span class="number">10</span>; t += <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">char</span> dir;</div><div class="line">            <span class="keyword">int</span> t, d;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; dir &gt;&gt; t &gt;&gt; d;</div><div class="line">            <span class="keyword">if</span>(dir == <span class="string">'A'</span>) &#123;</div><div class="line">                A[p++] = Car(t, d);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                B[q++] = Car(t, d);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        DP(p, q);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(dp[p][q][<span class="number">0</span>], dp[p][q][<span class="number">1</span>]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://acm.scu.edu.cn/soj/problem.action?id=3711&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SOJ3711&lt;/a&gt;&lt;br&gt;&lt;strong&gt;题意&lt;/strong&gt;:这件题意的有点坑。有一条
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 2142 Cow Exhibition</title>
    <link href="http://luoxinchen.me/2015/11/06/2015-11-06-SOJ2142CowExhibition/"/>
    <id>http://luoxinchen.me/2015/11/06/2015-11-06-SOJ2142CowExhibition/</id>
    <published>2015-11-06T06:26:50.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>:有N头牛$(0<n\leq100)$,每头牛有两个属性smartness(si)和funness(fi),现在需要从这n头牛中选出一部分牛,使得这些牛的smartness之和和funness之和最大,并且他们的smartness之和 以及="" funness之和不能为负值.="" 输出最大的="" smartness之和="" +="" funness之和.="" **分析**:设每头牛的ai="Si" fi,="" 如果把所有大于0的ai加起来,貌似就能得到最大值,但是这样不能保证si之和以及fi之和也为整数,所以不能这样做.="" 这里有个很巧妙的做法,把牛的两个属性si和fi,一个当成物品容量,一个当成物品价值,这样就可以对于每一个固定的s值算出最大的f,然后最后在所有的s="">=0, F&gt;=0的值中找到一个最大的S+F.着实是01背包及其巧妙的转化.这里需要注意一个问题是容量为负值时需要从前往后更新.<br><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">100000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> S[maxn], F[maxn];</div><div class="line"><span class="keyword">int</span> N;</div><div class="line"><span class="keyword">int</span> dp[maxv*<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> m1 = <span class="number">0</span>, m2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;S[i], &amp;F[i]);</div><div class="line">            <span class="keyword">if</span>(S[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">                m1 += S[i];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                m2 += S[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> max_sum = max(m1, <span class="built_in">abs</span>(m2)) + <span class="number">10</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>*max_sum; i++) dp[i] = -inf;</div><div class="line">        dp[max_sum] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">int</span> v = S[i];</div><div class="line">            <span class="keyword">if</span>(v &gt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*max_sum - <span class="number">1</span>; j &gt;= v; j--) &#123;</div><div class="line">                    dp[j] = max(dp[j], dp[j-v] + F[i]);</div><div class="line">                    <span class="keyword">if</span>(j &gt;= max_sum &amp;&amp; dp[j] &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        ans = max(ans, j - max_sum + dp[j]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>*max_sum + v - <span class="number">1</span>; j++) &#123;</div><div class="line">                    dp[j] = max(dp[j], dp[j-v] + F[i]);</div><div class="line">                    <span class="keyword">if</span>(j &gt;= max_sum &amp;&amp; dp[j] &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        ans = max(ans, j - max_sum + dp[j]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></n\leq100)$,每头牛有两个属性smartness(si)和funness(fi),现在需要从这n头牛中选出一部分牛,使得这些牛的smartness之和和funness之和最大,并且他们的smartness之和></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;:有N头牛$(0&lt;n\leq100)$,每头牛有两个属性smartness(si)和funness(fi),现在需要从这n头牛中选出一部分牛,使得这些牛的smartness之和和funness之和最大,并且他们的smartness之和 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 2505 The Country Fair</title>
    <link href="http://luoxinchen.me/2015/11/03/2015-11-03-SOJ2505TheCountryFair/"/>
    <id>http://luoxinchen.me/2015/11/03/2015-11-03-SOJ2505TheCountryFair/</id>
    <published>2015-11-03T02:40:46.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>: John 去参加国家展览,每个展台i在P[i]时刻都会有一个抽奖活动,从展台i走到展台j需要花费T[i][j]的时间,John在时刻0在1号站台,john想尽量多的参加抽奖活动,问他最多可以参加多少个抽奖活动.</p>
<p><strong>分析</strong>:这道题可以想成John从s号展台出发,然后最后走到e号展台,使其中路线当中抽奖过的展台越多越好.这样可以转化为一个最短路问题,考虑这样建图,如果John在i号展台抽奖,那么他必须提前到达i号展台并等到P[i]时刻,P[i] + T[i][j] &lt;= P[j] 那么John便可以再到j号展台抽奖,则从i到j连一条权值为-1的边,因为John在时刻0在1号展台,可以通过T[0][j] &lt;= P[j] 判断出John第一个可以抽奖的展台,对于每一个可以第一个抽奖的展台s,枚举终点e找到路径最小的path[s][e],这样-path[s][e] + 1就是John可以抽奖的最多的次数.其中求最短路径可以用floyd一次搞定.很经典的图论题.</p>
<p><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">400</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> dist[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn];</div><div class="line"><span class="keyword">int</span> P[maxn];</div><div class="line"><span class="keyword">int</span> N;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;P[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;dist[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(i == j) dp[i][j] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(P[i] + dist[i][j] &lt;= P[j]) &#123;</div><div class="line">                    dp[i][j] = <span class="number">-1</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    dp[i][j] = inf;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(dist[<span class="number">0</span>][i] &lt;= P[i]) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">                    <span class="keyword">if</span>(dp[i][j] &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        ans = max(ans, -dp[i][j] + <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;: John 去参加国家展览,每个展台i在P[i]时刻都会有一个抽奖活动,从展台i走到展台j需要花费T[i][j]的时间,John在时刻0在1号站台,john想尽量多的参加抽奖活动,问他最多可以参加多少个抽奖活动.&lt;/p&gt;
&lt;p&gt;&lt;st
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 2113 数字游戏</title>
    <link href="http://luoxinchen.me/2015/11/03/2015-11-03-SOJ2113%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/"/>
    <id>http://luoxinchen.me/2015/11/03/2015-11-03-SOJ2113数字游戏/</id>
    <published>2015-11-03T02:27:53.000Z</published>
    <updated>2016-08-08T14:34:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>:丁丁最近沉迷于一个数字游戏之中。这个游戏看似简单，但丁丁在研究了许多天之后却发觉原来在简单的规则下想要赢得这个游戏并不那么容易。游戏是这样的，在你面前有一圈整数（一共n个），你要按顺序将其分为m个部分，各部分内的数字相加，相加所得的m个结果对10取模后再相乘，最终得到一个数k。游戏的要求是使你所得的k最大或者最小。 例如，对于下面这圈数字（n=4，m=2）：</p>
<p>当要求最小值时，((2-1) mod 10)×((4+3) mod 10)=1×7=7，要求最大值时，为((2+4+3) mod 10)×(-1 mod 10)=9×9=81。特别值得注意的是，无论是负数还是正数，对10取模的结果均为非负值。 丁丁请你编写程序帮他赢得这个游戏。<br><!--moer--><br>Input<br>输入有多组数据，对于每一组数据：第一行有两个整数，n（1&lt;=n&lt;=50）和m（1&lt;=m&lt;=9）。以下n行每行有个整数，其绝对值不大于104，按顺序给出圈中的数字，首尾相接。</p>
<p><strong>分析</strong>:很简单的dp,先不考虑起始点,以求最小值为例,对于序列a1, a2, a3 … an.定义dp[i][j]为前i个数字恰好分为j组时的最小值,转移方程为$dp[i][j] = min(dp[k][j-1] <em> a_(k+1) </em> … <em> a[i]) (0&lt;k&lt;i)$, 然后再枚举起点就可以做出来,总的时间复杂度为O(n^3</em>m)</p>
<p><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">9</span> + <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> A[maxn], S[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxm];</div><div class="line"><span class="keyword">int</span> dp2[maxn][maxm];</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t = A[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</div><div class="line">        A[i] = A[i + <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    A[n - <span class="number">1</span>] = t;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        sum += A[i];</div><div class="line">        S[i + <span class="number">1</span>] = sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</div><div class="line">                <span class="keyword">int</span> t = ((S[i] - S[j]) % <span class="number">10</span> + <span class="number">10</span>) % <span class="number">10</span>;</div><div class="line">                dp[i][k] = max(dp[i][k], dp[j][k - <span class="number">1</span>] * t);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[n][m];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP2</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp2, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp2));</div><div class="line">    dp2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</div><div class="line">                <span class="keyword">int</span> t = ((S[i] - S[j]) % <span class="number">10</span> + <span class="number">10</span>)%<span class="number">10</span>;</div><div class="line">                <span class="keyword">if</span>(dp2[j][k - <span class="number">1</span>] != <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">if</span>(dp2[i][k] == <span class="number">-1</span>) &#123;</div><div class="line">                        dp2[i][k] = dp2[j][k - <span class="number">1</span>] * t;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        dp2[i][k] = min(dp2[i][k], dp2[j][k<span class="number">-1</span>] * t);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp2[n][m];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> maxres = <span class="number">0</span>, minres = inf;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            next();</div><div class="line">            maxres = max(maxres, DP());</div><div class="line">            minres = min(minres, DP2());</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, minres, maxres);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;:丁丁最近沉迷于一个数字游戏之中。这个游戏看似简单，但丁丁在研究了许多天之后却发觉原来在简单的规则下想要赢得这个游戏并不那么容易。游戏是这样的，在你面前有一圈整数（一共n个），你要按顺序将其分为m个部分，各部分内的数字相加，相加所得的m
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 592D Super M</title>
    <link href="http://luoxinchen.me/2015/11/01/2015-11-01-Codeforces592DSuperM/"/>
    <id>http://luoxinchen.me/2015/11/01/2015-11-01-Codeforces592DSuperM/</id>
    <published>2015-11-01T13:17:00.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>:给出一颗节点数为n的树,其中有m个点必须要访问到,起点可以任意,每一次只能从当前点走到相邻点,每个点可以重复走,每走一步需要花费一个单位的时间,求把m个点走完最少需要花费的时间,并使得起点的编号最小.<br><strong>分析</strong>:这道题比赛的时候并没有一点思路,赛后看了官方的题解才知道怎样做,代码写的很挫,没想到wa了一发改了一个小地方后直接AC,还是有点小激动.</p>
<p><img src="http://img.blog.csdn.net/20151101210305487" alt="这里写图片描述"><br>1.根据观察可以发现,起点一定是m个点中的一个,很明显如果起点不是红色的点,你需要先走到一个红色的点上去.<br>2.如果想要走完所有的m个点,则一定会走完一颗子树,这颗子树包含这所有的m个点,换句话说这m个点可以唯一确定一颗子树<br>3.如果题目要求最后还要返回起点的话,可以观察出需要花费的时间 = 这颗子树的边数 <em> 2.<br>4.不需要返回,则可以在这颗子树上找到一条最长的边,也就是这棵树的直径,然后沿着这个直径访问完所有的m个点,这样需要的时间为,子树的边数</em>2 - 直径的边数.<br>5.这样问题就转化问,先求出这颗子树,然后找到一条端点尽量小的,最长的直径.<br>6.求树的直径有个经典思想,可以从任意一个点出发,然后dfs(bfs)找到距离该点最远的点t,再从t点出发找到一个距离t点最远的点s,则s-t就是树的直径.具体证明网上有很多,这里就不再累赘.<br>7.所以这里可以从任意一个红色的点出发,找到这颗子树,并找到一个距离最远且编号尽量小的端点,然后在这颗子树上在进行一次dfs就可以解决这个问题.这里只需要注意更新距离的时候同时还要考虑端点的编号大小即可.</p>
<p><strong>代码</strong>:<br>代码写的有点挫,个人比较懒,也懒得去重构,对不住各位看官.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">123456</span> + <span class="number">5</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> On[maxn];</div><div class="line"><span class="keyword">int</span> A[maxn];</div><div class="line"><span class="keyword">int</span> tar, d;</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> s)</span></span></div><div class="line">&#123;</div><div class="line">    vis[s] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[s].size(); i++) &#123;</div><div class="line">        <span class="keyword">int</span> u = G[s][i];</div><div class="line">        <span class="keyword">if</span>(!vis[u]) &#123;</div><div class="line">            dis[u] = dis[s] + <span class="number">1</span>;</div><div class="line">            flag |= dfs1(u);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(A[s]) &#123;</div><div class="line">        flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(dis[s] &gt; d || (dis[s] == d &amp;&amp; s &lt; tar)) &#123;</div><div class="line">            d = dis[s];</div><div class="line">            tar = s;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(flag) &#123;</div><div class="line">        On[s] = <span class="literal">true</span>;</div><div class="line">        cnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> s)</span></span></div><div class="line">&#123;</div><div class="line">    vis[s] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[s].size(); i++) &#123;</div><div class="line">        <span class="keyword">int</span> u = G[s][i];</div><div class="line">        <span class="keyword">if</span>(!vis[u] &amp;&amp; On[u]) &#123;</div><div class="line">            dis[u] = dis[s] + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(dis[u] &gt; d || (dis[u] == d &amp;&amp; u &lt; tar)) &#123;</div><div class="line">                d = dis[u];</div><div class="line">                tar = u;</div><div class="line">            &#125;</div><div class="line">            dfs2(u);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        A[x] = <span class="literal">true</span>;</div><div class="line">        tar = x;</div><div class="line">    &#125;</div><div class="line">    fill(dis, dis + n + <span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">    fill(vis, vis + n + <span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">    d = <span class="number">0</span>;</div><div class="line">    dis[tar] = <span class="number">0</span>;</div><div class="line">    dfs1(tar);</div><div class="line">    <span class="keyword">int</span> k1 = tar;</div><div class="line">    fill(dis, dis + n + <span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">    fill(vis, vis + n + <span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">    d = <span class="number">0</span>;</div><div class="line">    dis[tar] = <span class="number">0</span>;</div><div class="line">    dfs2(tar);</div><div class="line">    <span class="keyword">int</span> ans = min(k1, tar);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n%d"</span>, ans, <span class="number">2</span>*(cnt<span class="number">-1</span>) - d);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;:给出一颗节点数为n的树,其中有m个点必须要访问到,起点可以任意,每一次只能从当前点走到相邻点,每个点可以重复走,每走一步需要花费一个单位的时间,求把m个点走完最少需要花费的时间,并使得起点的编号最小.&lt;br&gt;&lt;strong&gt;分析&lt;/s
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 590B  Chip &#39;n Dale Rescue Rangers</title>
    <link href="http://luoxinchen.me/2015/10/27/2015-10-27-Codeforces590BChip&#39;nDaleRescueRangers/"/>
    <id>http://luoxinchen.me/2015/10/27/2015-10-27-Codeforces590BChip&#39;nDaleRescueRangers/</id>
    <published>2015-10-27T15:50:00.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>:<br>一艘飞船相对空气的最大速度是V,一开始风速是$\vec F_1$(x1,y1), T秒后风速变为$\vec F_2$(x2, y2),求从s点(a1,b1)到e点(a2,b2)的最短时间.输入保证飞船相对空气的最大速度大于风速.<br><strong>分析</strong>:<br>这道题很巧妙的利用了向量的性质,当最短时间$t \leq T$的时候很明显可以直接计算出答案,现在考虑$t  &gt; T$的时候, 设飞船前T秒的速度为$\vec v_1$, 后t-T秒的速度为$\vec v_2$, 这样可以得到等式$(\vec F_1+\vec v_1)<em>T + (\vec F_2 + \vec v_2) </em> (t-T) = \overrightarrow {se}$. 然后进行变形可以得到$\vec F_1<em>T + \vec F_2</em>(t-T) + \vec v_1<em>T + \vec v_2 </em> (t-T) =\overrightarrow {se}$, 这样因为$\vec F_1, \vec F_2$已知,可以看出t给出后,前半部分可以直接计算出来,后半部分$v_1, v_2$肯定取最大速度最快,这样就可以直接二分t,然后判断这个等式是否能够成立,就可以计算出来最小速度.不看数学表达式,这道题有个很物理的想法,风和飞船速度的合速度可以拆开,让风先吹ts,看飞船落在哪个地方,然后让飞船满速向目标地点前进,判断在给定时间t内,飞船能否飞到目标地点.因为如果ts内不能达到,肯定&lt;=ts内也不能达到.所以就可以二分解决这个问题.<br><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf  = <span class="number">1e15</span>;</div><div class="line"><span class="keyword">struct</span> P</div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">    P(<span class="keyword">double</span> x = <span class="number">0</span>, <span class="keyword">double</span> y = <span class="number">0</span>):x(x), y(y) &#123;&#125;</div><div class="line">    P <span class="keyword">operator</span> + (P b) &#123;</div><div class="line">        <span class="keyword">return</span> P(x + b.x, y + b.y);</div><div class="line">    &#125;</div><div class="line">    P <span class="keyword">operator</span> * (<span class="keyword">double</span> k) &#123;</div><div class="line">        <span class="keyword">return</span> P(k*x, k*y);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(P a, P b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y));</div><div class="line">&#125;</div><div class="line"></div><div class="line">P s, e;</div><div class="line"></div><div class="line">P v1, v2;</div><div class="line"><span class="keyword">double</span> maxv, T;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> t)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> lt = t - T;</div><div class="line">    P cur = s;</div><div class="line">    cur = cur + (v1*min(t, T));</div><div class="line">    <span class="keyword">if</span>(lt &gt; <span class="number">0</span>) &#123;</div><div class="line">        cur = cur + (v2 * lt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> d = dist(cur, e);</div><div class="line">    <span class="keyword">return</span> maxv*t &gt; d;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; s.x &gt;&gt; s.y &gt;&gt; e.x &gt;&gt; e.y;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; maxv &gt;&gt; T;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt;  v1.x &gt;&gt; v1.y &gt;&gt; v2.x &gt;&gt; v2.y;</div><div class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e15</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</div><div class="line">        <span class="keyword">double</span> m = (l + r) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(check(m)) &#123;</div><div class="line">            r = m;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            l = m;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.9f\n"</span>, l);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;:&lt;br&gt;一艘飞船相对空气的最大速度是V,一开始风速是$\vec F_1$(x1,y1), T秒后风速变为$\vec F_2$(x2, y2),求从s点(a1,b1)到e点(a2,b2)的最短时间.输入保证飞船相对空气的最大速度大于风速
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 4438 Censor (字符串，kmp，hash，经典）</title>
    <link href="http://luoxinchen.me/2015/09/10/2015-09-10-SOJ4438Censor(%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8Ckmp%EF%BC%8Chash%EF%BC%8C%E7%BB%8F%E5%85%B8%EF%BC%89/"/>
    <id>http://luoxinchen.me/2015/09/10/2015-09-10-SOJ4438Censor(字符串，kmp，hash，经典）/</id>
    <published>2015-09-10T07:14:09.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>题意：两个字符串w, p。 执行以下操作，1.如果p中含有w，将第一个遇到的w删除，剩下的连接起来。2.如果p中还有w重复1，否则输出处理后的字符串。</li>
<li>思路：可以用一个栈来处理这个问题，其中匹配可以采用kmp算法，也可以用hash。</li>
<li>代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//kmp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">char</span> w[maxn], p[maxn];</div><div class="line"><span class="keyword">char</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> next[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> next[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</div><div class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(j &lt; len) &#123;</div><div class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span> || str[j] == str[k]) &#123;</div><div class="line">            j++; k++;</div><div class="line">            <span class="keyword">if</span>(str[j] == str[k]) &#123;</div><div class="line">                next[j] = next[k];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                next[j] = k;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            k = next[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, w, p) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="comment">//memset(ans, 0, sizeof(ans));</span></div><div class="line">        getnext(w, next);</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sta;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; mt;</div><div class="line">        <span class="keyword">int</span> plen = <span class="built_in">strlen</span>(p), wlen = <span class="built_in">strlen</span>(w);</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(j &lt; plen) &#123;</div><div class="line">            <span class="keyword">if</span>(k == <span class="number">-1</span> || p[j] == w[k]) &#123;</div><div class="line">                j++; k++;</div><div class="line">                sta.push(p[j<span class="number">-1</span>]);</div><div class="line">                mt.push(k);</div><div class="line">                <span class="keyword">if</span>(k == wlen) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wlen; i++) &#123;</div><div class="line">                        sta.pop();</div><div class="line">                        mt.pop();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(mt.empty()) &#123;</div><div class="line">                        k = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> k = mt.top();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                k = next[k];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> i = sta.size() - <span class="number">1</span>;</div><div class="line">        ans[i+<span class="number">1</span>] = <span class="string">'\0'</span>;</div><div class="line">        <span class="keyword">while</span>(!sta.empty()) &#123;</div><div class="line">            ans[i--] = sta.top();</div><div class="line">            sta.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//hash</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> seed = <span class="number">1331</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>  ull;</div><div class="line"><span class="keyword">char</span> w[maxn], p[maxn];</div><div class="line"><span class="keyword">char</span> ans[maxn];</div><div class="line">ull <span class="number">_</span>hash[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, w, p)) &#123;</div><div class="line">        ull mhash = <span class="number">0</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> wlen = <span class="built_in">strlen</span>(w), plen = <span class="built_in">strlen</span>(p);</div><div class="line">        ull k = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wlen; i++) &#123;</div><div class="line">            mhash = mhash*seed + w[i];</div><div class="line">            k *= seed;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sta;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, len = <span class="number">1</span>;</div><div class="line">        <span class="number">_</span>hash[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &lt; plen; i++, len++) &#123;</div><div class="line">            <span class="number">_</span>hash[len] = <span class="number">_</span>hash[len - <span class="number">1</span>] * seed + p[i];</div><div class="line">            sta.push(p[i]);</div><div class="line">            <span class="keyword">if</span>(len &gt;= wlen) &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="number">_</span>hash[len] - <span class="number">_</span>hash[len - wlen]*k == mhash) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; wlen; j++) &#123;</div><div class="line">                        sta.pop();</div><div class="line">                    &#125;</div><div class="line">                    len = len - wlen ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> j = sta.size();</div><div class="line">        ans[j--] = <span class="string">'\0'</span>;</div><div class="line">        <span class="keyword">while</span>(!sta.empty()) &#123;</div><div class="line">            ans[j--] = sta.top();</div><div class="line">            sta.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题意：两个字符串w, p。 执行以下操作，1.如果p中含有w，将第一个遇到的w删除，剩下的连接起来。2.如果p中还有w重复1，否则输出处理后的字符串。&lt;/li&gt;
&lt;li&gt;思路：可以用一个栈来处理这个问题，其中匹配可以采用kmp算法，也可以用hash。&lt;/li&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
