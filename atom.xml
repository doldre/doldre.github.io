<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xinchen&#39;s Blog</title>
  <subtitle>For you thousands of times.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://doldre.github.io/"/>
  <updated>2016-08-09T02:41:40.000Z</updated>
  <id>http://doldre.github.io/</id>
  
  <author>
    <name>Xinchen Luo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>斜率优化小结</title>
    <link href="http://doldre.github.io/2016/05/10/2016-05-10-%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96%E5%B0%8F%E7%BB%93/"/>
    <id>http://doldre.github.io/2016/05/10/2016-05-10-斜率优化小结/</id>
    <published>2016-05-10T13:06:00.000Z</published>
    <updated>2016-08-09T02:41:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>##单调队列优化<br>在写斜率优化之前，我们来回顾一下单调队列优化的dp</p>
<ol>
<li>对于如下形式的dp方程<br>$$dp[i] = min{dp[j] + f(j)} (0 &lt; j &lt; i)$$<br>我们直接用一个变量维护(0, i)中dp[j] + f(j)的最小值即可</li>
</ol>
<p>2.对于如下形式的dp方程<br>$$dp[i] = min{dp[j] + f(j)} (i - m &lt; j &lt; i)$$<br>我们可以用一个单调队列维护一个(i - m, j)中dp[j] + f(j)的最小值，然后做到O(1)转移。</p>
<a id="more"></a>
<p>##斜率优化</p>
<p>###基本形式<br>但是对于形如<br>$$dp[i] = min{dp[j] + f(i, j)} $$<br>的方程，无法做到O(1)计算$dp[j] + f(i, j)$的最小值，这时就需要斜率优化这个技巧来解决这个问题了。<br>令k &lt; j &lt; i，当我们更新dp[i]时，如果有dp[j] + f(i, j) 比dp[k] + f(i, k)更优，则有dp[j] + f(i, j) - (dp[k] + f(i, k) &lt; 0，对于这个不等式如果能够化解成如下形式<br>$$\frac {Y(j) - Y(k)} { X(j) - X(k)} &lt; f(i)$$<br>我们就能通过斜率优化这个dp了。<br>让我们来举一个例子: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3507" target="_blank" rel="external">hdu3507</a>  dp方程为<br>$$dp[i] = min{dp[j] + M + (sum[i] - sum[j])^2 (0 &lt; j &lt; i)}$$<br>令k &lt; j &lt; i，当有<br>$$dp[j] + M + (sum[i] - sum[j])^2 - (dp[k] + M + (sum[i] - sum[k])^2) &lt; 0  $$<br>从j转移到i, 比从k转移到i更优，变换此不等式可得:<br>$$\frac{(dp[j]+ sum[j]^2) - (dp[k] + sum[k]^2)}{sum[j] - sum[k]} &lt; 2sum[i]$$<br>令$Y(i) = dp[i] + sum[i]^2$, $X(i) = sum[i]$, $f(i) = 2sum[i]$则将此不等式化解为上述形式。</p>
<p>###优化方法:<br>可以发现，若满足$\frac {Y(j) - Y(k)} { X(j) - X(j)} &lt; f(i)$则j转移到i，比k转移到i更优，如果我们把(X(j), Y(j)), (X(k), Y(k))当成平面上的两个点Pj, Pk，这个不等式的含义即为若$ \overrightarrow{PjPk}$的斜率＜f(i)则，从j转移更优。<br>令grad(i, j)表示$\overrightarrow{PiPj}$的斜率，现在我们假设grad(i,j) &lt; grad(j, k)，若grad(i, j) &lt; f(I),则i比j更优，若grad(i, j) &gt; f(I), 则grad(j, k) &gt; f(I),那么从k转移比从j转移更优，当grad(i, j) &lt; grad(j, k)的时候，无论如何j转移到i都不会是最优。而这种情况恰好对应下图<br><img src="http://img.blog.csdn.net/20160510205214742" alt="这里写图片描述"><br>所以这种情况时，我们可以直接把j点删除，最后能够转移的点集只会存在这种图形，<img src="http://img.blog.csdn.net/20160510205342117" alt="这里写图片描述"><br>所以最后我们维护一个上凸集即可。<br>但是此时我们还是没有解决最终问题，如何才能找到转移到i点的最优的点呢。可以发现最后的点集一定是一个凸集，也就是斜率单调！！这样对于k &lt; j, grad(j,k) &lt; f(i),时更优，从图形特点我们可以发现如果j比k优，那么j点比所有比k小的点都优，所以对于每一个f(i),我们维护一个所有比i点小的凸集，二分查找斜率比f(i)小的编号最大的点，就是最优的转移点。如果f(i)也满足单调性，比如这道题，我们还可以直接维护一个单调队列就能解决这个问题。</p>
<p>###分治做法<br>对于f(i)单调的这种情况，除了使用单调队列优化的斜率优化做，我们还有另外一种分治的做法，但是复杂度会变成O(nlogn) 比O(n)差。<br>当f(i)单调的时候，我们可以发现若a &gt; b,则f(a) &gt; f(b),设转移到a的最优点是c，转移到b的最优点是d，一定有c &gt; d。也就是转移到a的最优点一定大于等于转移到b的最优点。考虑这样的分治<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> dl, <span class="keyword">int</span> dr)</span> </span>&#123;</div><div class="line">	<span class="comment">//[l,r]表示现在更新[l,r]区间dp[i]的最优值</span></div><div class="line">	<span class="comment">//用j -&gt; f(i),表示j是更新f(i)最优值的最优点</span></div><div class="line">	<span class="comment">//那么[dl,dr]表示更新dp([l,r])的点，一定在[dl,dr]范围内</span></div><div class="line">	<span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; </div><div class="line">	<span class="keyword">int</span> dm = dl;</div><div class="line">	<span class="keyword">int</span> g = inf;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = dl; i &lt;= dr; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(g &lt; dp[i] + f(i, mid)) &#123;</div><div class="line">			g = dp[i] + f(i, mid);<span class="comment">//记录更新dp[mid]的最优</span></div><div class="line">			dm = i;<span class="comment">//记录更新dp[mid]的最优点</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	dp[mid] = g; <span class="comment">//更新dp[mid]的值</span></div><div class="line">	<span class="comment">//因为上文叙述的单调性，</span></div><div class="line">	<span class="comment">//更新[l,mid-1]的最优点，一定在[dl,dm]范围内</span></div><div class="line">	<span class="keyword">if</span>(l &lt; mid) dfs(l, mid - <span class="number">1</span>, dl, dm);</div><div class="line">	<span class="comment">//更新[mid+1,r]的最优点，一定在[dm,dr]范围内</span></div><div class="line">	<span class="keyword">if</span>(mid &lt; r) dfs(mid + <span class="number">1</span>, r, dm, dr);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以发现这个分治比起斜率优化，不仅写起来方便很多，并且适用的范围也更广。这个做法不局限于斜率单调，可以发现只要满足c是更新f(a)的最优点，d是更新f(b)的最优点，若a &gt; b 一定有 c &gt; d，则可以有这个分治做。</p>
<p>##PS:<br>这个做法是我在<a href="http://codeforces.com/contest/674/problem/C" target="_blank" rel="external">codeforces 674E</a>,跟Claris神犇的代码学会的<a href="http://codeforces.com/contest/674/submission/17794311" target="_blank" rel="external">solution</a>,在此特地感谢Claris.这个做法着实是非常的劲啊！多一个log，但是换来编码复杂度和通用性更广的解法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##单调队列优化&lt;br&gt;在写斜率优化之前，我们来回顾一下单调队列优化的dp&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于如下形式的dp方程&lt;br&gt;$$dp[i] = min{dp[j] + f(j)} (0 &amp;lt; j &amp;lt; i)$$&lt;br&gt;我们直接用一个变量维护(0, i)中dp[j] + f(j)的最小值即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.对于如下形式的dp方程&lt;br&gt;$$dp[i] = min{dp[j] + f(j)} (i - m &amp;lt; j &amp;lt; i)$$&lt;br&gt;我们可以用一个单调队列维护一个(i - m, j)中dp[j] + f(j)的最小值，然后做到O(1)转移。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://doldre.github.io/tags/ACM/"/>
    
      <category term="dp" scheme="http://doldre.github.io/tags/dp/"/>
    
      <category term="斜率优化" scheme="http://doldre.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 652E Pursuit For Artifacts(Tarjan 缩点)</title>
    <link href="http://doldre.github.io/2016/03/30/2016-03-30-Codeforces652EPursuitForArtifacts(Tarjan%E7%BC%A9%E7%82%B9)/"/>
    <id>http://doldre.github.io/2016/03/30/2016-03-30-Codeforces652EPursuitForArtifacts(Tarjan缩点)/</id>
    <published>2016-03-30T07:14:00.000Z</published>
    <updated>2016-08-08T14:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Codeforces 652E Pursuit For Artifacts(Tarjan 缩点)<br>[TOC]</p>
<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><blockquote>
<p>有n个岛，m座桥，某些桥上有宝藏，每条桥只能经过一次，给出起点岛a和终点岛b，问能否从a走到b并带走至&gt;少一个宝藏。</p>
</blockquote>
<a id="more"></a>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>这道竟然是我的tarjan算法入门题，用tarjan缩点为树，如果是缩点后包含宝藏把这个点的权值设为非0，如果是桥，保留原来的权值，因为缩点后是一棵树，所以直接dfs找到从a到b的路径，看路径中是否含权值非零的点或边即可。</p>
<h2 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h2><p>在比赛时自己也是想了很多个解法的，但是最多也就跑过了第12组数据，看到了这个思路感觉确实很巧妙，看到某个大牛总结的，边只能走一次的这种情况大多需要用tarjan缩点为树。这道题学弟竟然用其他方法给ac，确实佩服。这道题也算是我学Tarjan后ac的第一道题吧，Tarjan算法着实是很优美！</p>
<h2 id="AC-CODE："><a href="#AC-CODE：" class="headerlink" title="AC CODE："></a>AC CODE：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">struct</span> Edge &#123;</div><div class="line">    <span class="keyword">int</span> v, c;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], isin[maxn], id[maxn], dfsNum, bcc;</div><div class="line"><span class="keyword">int</span> stk[maxn], top;</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; G[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;Edge&gt; T[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">    dfn[u] = low[u] = ++dfsNum;</div><div class="line">    stk[++top] = u;</div><div class="line">    isin[u] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (Edge e: G[u]) &#123;</div><div class="line">        <span class="keyword">int</span> v = e.v;</div><div class="line">        <span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v, u);</div><div class="line">            low[u] = min(low[u], low[v]);</div><div class="line">        &#125; <span class="keyword">else</span> low[u] = min(low[u], dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[u] == dfn[u]) &#123;</div><div class="line">        ++bcc;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> v = stk[top--];</div><div class="line">            isin[v] = <span class="literal">false</span>;</div><div class="line">            id[v] = bcc;</div><div class="line">            <span class="keyword">if</span>(v == u) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan_init</span><span class="params">()</span> </span>&#123;</div><div class="line">     bcc = dfsNum = <span class="number">0</span>;</div><div class="line">     <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</div><div class="line">     tarjan(<span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> fa, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(s == t) <span class="keyword">return</span> sum + val[t];</div><div class="line">    <span class="keyword">for</span> (Edge e: T[s]) &#123;</div><div class="line">         <span class="keyword">int</span> v = e.v;</div><div class="line">         <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</div><div class="line">         <span class="keyword">if</span>(dfs(v, t, s, sum + e.c +val[v])) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">        <span class="keyword">int</span> u, v, c;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</div><div class="line">        G[u].push_back(&#123;v, c&#125;);</div><div class="line">        G[v].push_back(&#123;u, c&#125;);</div><div class="line">    &#125;</div><div class="line">    tarjan_init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">         <span class="keyword">int</span> u = id[i];</div><div class="line">         <span class="keyword">for</span> (Edge e: G[i]) &#123;</div><div class="line">             <span class="keyword">int</span> v = id[e.v];</div><div class="line">             <span class="keyword">if</span>(u == v) val[u] += e.c;</div><div class="line">             <span class="keyword">else</span> T[u].push_back(&#123;v, e.c&#125;);</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> s, t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</div><div class="line">    <span class="built_in">puts</span>(dfs(id[s], id[t], <span class="number">-1</span>, val[id[s]]) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Codeforces 652E Pursuit For Artifacts(Tarjan 缩点)&lt;br&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;题意：&quot;&gt;&lt;a href=&quot;#题意：&quot; class=&quot;headerlink&quot; title=&quot;题意：&quot;&gt;&lt;/a&gt;题意：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有n个岛，m座桥，某些桥上有宝藏，每条桥只能经过一次，给出起点岛a和终点岛b，问能否从a走到b并带走至&amp;gt;少一个宝藏。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hihocoder *Divisors*</title>
    <link href="http://doldre.github.io/2016/03/18/2016-03-18-hihocoder*Divisors*/"/>
    <id>http://doldre.github.io/2016/03/18/2016-03-18-hihocoder*Divisors*/</id>
    <published>2016-03-18T12:26:00.000Z</published>
    <updated>2016-08-08T14:17:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hihocoder-Divisors"><a href="#hihocoder-Divisors" class="headerlink" title="hihocoder Divisors"></a>hihocoder <em>Divisors</em></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote>
<p>   给定一个N，求不超过N的正整数中因子最多的数。如果有多个答案，输出最小的一个。</p>
</blockquote>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><p>最近做题可以明显发现自己的思维缺陷，容易陷入思维定式，看到这道题时，一眼觉得是个数论题，然后开始找质因数分解瞎猜结论，并没有仔细观察性质，最后这是一个搜索题，看了题解确实不难，性质也很容易发现，但是并没有认真去思考，解法确实很妙！<a href="http://hihocoder.com/discuss/question/2857/" target="_blank" rel="external">官方题解</a>写的非常好了，这里就不再累述。</p>
<h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code:"></a>AC Code:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line">ll n;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">bool</span> is_prime[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</div><div class="line"></div><div class="line">ll maxdivisors, result;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_prime</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(is_prime, <span class="literal">true</span>, <span class="keyword">sizeof</span>(is_prime));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(is_prime[i]) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; maxn; j += i) &#123;</div><div class="line">                is_prime[j] = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (is_prime[i]) prime.push_back(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> prime_num, ll divisors, ll now, <span class="keyword">int</span> lastNi)</span> </span>&#123;</div><div class="line"><span class="comment">//    cout &lt;&lt; prime[prime_num] &lt;&lt; " " &lt;&lt; divisors &lt;&lt; " " &lt;&lt; now &lt;&lt; endl;</span></div><div class="line">    <span class="keyword">if</span> (prime[prime_num] &gt; n) &#123;</div><div class="line">         <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (divisors &gt; maxdivisors || (divisors == maxdivisors &amp;&amp; now &lt; result)) &#123;</div><div class="line">        maxdivisors = divisors;</div><div class="line">        result = now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; <span class="keyword">double</span>(now)*prime[prime_num] &lt; <span class="keyword">double</span>(n) + eps &amp;&amp; i &lt;= lastNi; i++) &#123;</div><div class="line">        now *= prime[prime_num];</div><div class="line">        dfs(prime_num + <span class="number">1</span>, divisors*(i + <span class="number">1</span>), now, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    make_prime();</div><div class="line">    maxdivisors = <span class="number">1</span>, result = <span class="number">1</span>;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, inf);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hihocoder-Divisors&quot;&gt;&lt;a href=&quot;#hihocoder-Divisors&quot; class=&quot;headerlink&quot; title=&quot;hihocoder Divisors&quot;&gt;&lt;/a&gt;hihocoder &lt;em&gt;Divisors&lt;/em&gt;&lt;/h1&gt;&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;   给定一个N，求不超过N的正整数中因子最多的数。如果有多个答案，输出最小的一个。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>约瑟夫环问题</title>
    <link href="http://doldre.github.io/2016/03/13/2016-03-13-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://doldre.github.io/2016/03/13/2016-03-13-约瑟夫环问题/</id>
    <published>2016-03-13T03:15:00.000Z</published>
    <updated>2016-08-08T14:17:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>#约瑟夫环问题</p>
<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><blockquote>
<p>n个人围成一个圆圈依次编号为0,1,…,n-1，从第一个人开始，依次报数1, 2,…,k-1,报到k的人退出，从退出的下一个人开始继续从1报数，仍然报到k的人退出，问最后留下的人是谁。</p>
</blockquote>
<a id="more"></a>
<h3 id="朴素解法："><a href="#朴素解法：" class="headerlink" title="朴素解法："></a>朴素解法：</h3><p>这是一个c语言入门题，我们可以用数组或者链表来模拟整个过程得到最终结果。但是这样复杂度为O(n^2)，当n较大时没法算出结果。</p>
<h3 id="数学解法："><a href="#数学解法：" class="headerlink" title="数学解法："></a>数学解法：</h3><p>先来模拟一下过程，当n ＝ 8，k ＝ 3时</p>
<ol>
<li><p><strong>n = 8, k = 3</strong></p>
<blockquote>
<p><code>0 1 2 3 4 5 6 7</code><br>第一次编号为2的退出</p>
</blockquote>
</li>
<li><p><strong>n = 7, k = 3</strong></p>
<blockquote>
<p><code>0 1 3 4 5 6 7</code><br>这次将从3开始数，从新进行编号<br><code>3 4 5 6 7 0 1     (A)</code><br><code>0 1 2 3 4 5 6    (B)</code><br>可以发现从(B)式到(A)式有(A) = ((B) + k)%(n+1)</p>
</blockquote>
</li>
</ol>
<p>可以继续模拟下去，可以发现这个公式始终满足，显然我们知道当n==1的时候，最后留下的肯定为0，所以我们可以根据这个公式自底向上的计算下去了。</p>
<p>###代码：<br><strong>递归版本</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> (fun(n - <span class="number">1</span>, k) + k) % n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>循环版本</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	f[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">		f[i] = (f[i<span class="number">-1</span>] + k) % n;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显当有多次查询的时候，使用循环版本把答案一次算完可以避免重复计算，当然递归版本记忆化也是可以的。</p>
<h3 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h3><p>当然朴素的约瑟夫环肯定是一个送分题，这周bc就有一个简单拓展题目<br><a href="http://bestcoder.hdu.edu.cn/contests/contest_chineseproblem.php?cid=677&amp;pid=1004" target="_blank" rel="external">King’s Game</a><br><code>为了铭记历史，国王准备在阅兵的间隙玩约瑟夫游戏。它召来了 n(1\le n\le 5000)n(1≤n≤5000) 个士兵，逆时针围成一个圈，依次标号 1, 2, 3 ... n1,2,3...n。
第一轮第一个人从 11 开始报数，报到 11 就停止且报到 11 的这个人出局。
第二轮从上一轮出局的人的下一个人开始从 11 报数，报到 22 就停止且报到 22 的这个人出局。
第三轮从上一轮出局的人的下一个人开始从 11 报数，报到 33 就停止且报到 33 的这个人出局。
第 n - 1n−1 轮从上一轮出局的人的下一个人开始从 11 报数，报到 n - 1n−1 就停止且报到 n - 1n−1 的这个人出局。
最后剩余的人是幸存者，请问这个人的标号是多少？</code></p>
<p>如果理解朴素的约瑟夫环话，可以发现这里就是一个简单的递推变化，同样定义$f(n, k)$为有n个人时，第k个人退出剩下的人的编号，$f(n,k) = (f(n - 1, k + 1) + k) % n$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> (f(n - <span class="number">1</span>, k + <span class="number">1</span>) + k) % n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>复杂度O(n)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#约瑟夫环问题&lt;/p&gt;
&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;n个人围成一个圆圈依次编号为0,1,…,n-1，从第一个人开始，依次报数1, 2,…,k-1,报到k的人退出，从退出的下一个人开始继续从1报数，仍然报到k的人退出，问最后留下的人是谁。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VIM YouCompleteMe 插件安装</title>
    <link href="http://doldre.github.io/2016/01/23/2016-01-23-VIMYouCompleteMe%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://doldre.github.io/2016/01/23/2016-01-23-VIMYouCompleteMe插件安装/</id>
    <published>2016-01-23T13:06:16.000Z</published>
    <updated>2016-08-08T14:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>安装Bundle 插件</li>
<li>用 Bundle 插件安装 YouCompleteMe</li>
<li>换到YouCompleteMe目录 使用 install.py 安装，—clang-completer 获得c语言支持</li>
<li>YouCompleteMe 还需要 ycm_extra_conf.py，到github上下载</li>
<li>ycm_extra_conf.py 需要用到 /usr/include 目录，但是mac上默认没有，需要Xcode Commond Line Tool工具的支持，用xcode-select —install 命令安装即可。反复安装了3次没有成功，就跪在这个坑上了。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;安装Bundle 插件&lt;/li&gt;
&lt;li&gt;用 Bundle 插件安装 YouCompleteMe&lt;/li&gt;
&lt;li&gt;换到YouCompleteMe目录 使用 install.py 安装，—clang-completer 获得c语言支持&lt;/li&gt;
&lt;li&gt;YouC
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 3711 Mountain Road</title>
    <link href="http://doldre.github.io/2015/11/06/2015-11-06-SOJ3711MountainRoad/"/>
    <id>http://doldre.github.io/2015/11/06/2015-11-06-SOJ3711MountainRoad/</id>
    <published>2015-11-06T07:39:26.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.scu.edu.cn/soj/problem.action?id=3711" target="_blank" rel="external">SOJ3711</a><br><strong>题意</strong>:这件题意的有点坑。有一条单向道，依次有车到达路的两边，同一方向的车经过同一个地点的时间间隔不能少于10s，不同方向的车，必须等到道路没车才能通过。并且同一个方向的车不能改变车的顺序。之所以说题意有点坑是因为题目中有这样一句话”provided it is not slowed down by other cars in front“,如果把这句话理解为每辆车只能匀速通过会出现问题。见下面分析。<br><strong>分析</strong>:见第二个样例,<br>&gt;</p>
<blockquote>
<p>输入：<br>4<br>A 0 100<br>B 50 100<br>A 100 1<br>A 170 100<br>输出：<br>270</p>
</blockquote>
<p>如果每辆车都只能匀速通过的话，可以发现，270s无论什么方案都是不能得到的，这里的270s应该是这样得到的，先过第二辆车，这个时候，第二辆车走完的时刻是150s，再通过第一辆，此时出发时间是150s，到达时间是250s，再通过第三辆，可以发现，如果必须是匀速，因为连续的两辆车通过同一个地点的间隔不能小于10s，所以他必须在前面一辆到达的250s之后的10s 260s到达，如果按照匀速这个假设，它只能在时刻259s的时候出发，所以下一辆只能在269s的时刻出发了。如果没有匀速的限制条件，第三辆车载160s的时刻出发，可以在260s的时候到达，第四俩车在170s的时刻出发，刚好就在270s的时刻到达了，也就是样例所示。</p>
<p>现在可以考虑定理dp[i][j][A/B]为当通过前i辆A方向的车，和j辆B方向的车，最后一辆车的方向是A/B的时候最短时间。如果这道题的题意是每辆车只能是匀速，那么dp[i][j][A/B]的时间可以从dp[i-1][j][A/B]转移而来，但是这里因为不是匀速直接这样转移会出问题。所以可以这样来跟新，对于每一个i，j都当成是一个间断点，也就是刚好车辆”反向”的点，然后去更新后面都是顺序通过的点，这样就能保证最后一定是最优的结果。如果还是不能理解，参考代码吧。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">struct</span> Car &#123;</div><div class="line">    <span class="keyword">int</span> s, d;</div><div class="line">    Car() &#123;&#125;</div><div class="line">    Car(<span class="keyword">int</span> s, <span class="keyword">int</span> d):s(s), d(d) &#123;&#125;</div><div class="line">&#125;;</div><div class="line">Car A[maxn], B[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= p; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= q; j++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</div><div class="line">                dp[i][j][k] = inf;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= p; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= q; j++) &#123;</div><div class="line">            <span class="keyword">int</span> s = dp[i][j][<span class="number">0</span>], t = s;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= q; k++) &#123;</div><div class="line">                s = max(s, B[k<span class="number">-1</span>].s);</div><div class="line">                t = max(t, s + B[k<span class="number">-1</span>].d);</div><div class="line">                dp[i][k][<span class="number">1</span>] = min(dp[i][k][<span class="number">1</span>], t);</div><div class="line">                s += <span class="number">10</span>; t += <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            s = dp[i][j][<span class="number">1</span>];</div><div class="line">            t = s;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= p; k++) &#123;</div><div class="line">                s = max(s, A[k<span class="number">-1</span>].s);</div><div class="line">                t = max(t, s + A[k<span class="number">-1</span>].d);</div><div class="line">                dp[k][j][<span class="number">0</span>] = min(dp[k][j][<span class="number">0</span>], t);</div><div class="line">                s += <span class="number">10</span>; t += <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">char</span> dir;</div><div class="line">            <span class="keyword">int</span> t, d;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; dir &gt;&gt; t &gt;&gt; d;</div><div class="line">            <span class="keyword">if</span>(dir == <span class="string">'A'</span>) &#123;</div><div class="line">                A[p++] = Car(t, d);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                B[q++] = Car(t, d);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        DP(p, q);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(dp[p][q][<span class="number">0</span>], dp[p][q][<span class="number">1</span>]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://acm.scu.edu.cn/soj/problem.action?id=3711&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SOJ3711&lt;/a&gt;&lt;br&gt;&lt;strong&gt;题意&lt;/strong&gt;:这件题意的有点坑。有一条
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 2142 Cow Exhibition</title>
    <link href="http://doldre.github.io/2015/11/06/2015-11-06-SOJ2142CowExhibition/"/>
    <id>http://doldre.github.io/2015/11/06/2015-11-06-SOJ2142CowExhibition/</id>
    <published>2015-11-06T06:26:50.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>:有N头牛$(0<n\leq100)$,每头牛有两个属性smartness(si)和funness(fi),现在需要从这n头牛中选出一部分牛,使得这些牛的smartness之和和funness之和最大,并且他们的smartness之和 以及="" funness之和不能为负值.="" 输出最大的="" smartness之和="" +="" funness之和.="" **分析**:设每头牛的ai="Si" fi,="" 如果把所有大于0的ai加起来,貌似就能得到最大值,但是这样不能保证si之和以及fi之和也为整数,所以不能这样做.="" 这里有个很巧妙的做法,把牛的两个属性si和fi,一个当成物品容量,一个当成物品价值,这样就可以对于每一个固定的s值算出最大的f,然后最后在所有的s="">=0, F&gt;=0的值中找到一个最大的S+F.着实是01背包及其巧妙的转化.这里需要注意一个问题是容量为负值时需要从前往后更新.<br><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">100000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> S[maxn], F[maxn];</div><div class="line"><span class="keyword">int</span> N;</div><div class="line"><span class="keyword">int</span> dp[maxv*<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> m1 = <span class="number">0</span>, m2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;S[i], &amp;F[i]);</div><div class="line">            <span class="keyword">if</span>(S[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">                m1 += S[i];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                m2 += S[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> max_sum = max(m1, <span class="built_in">abs</span>(m2)) + <span class="number">10</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>*max_sum; i++) dp[i] = -inf;</div><div class="line">        dp[max_sum] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">int</span> v = S[i];</div><div class="line">            <span class="keyword">if</span>(v &gt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*max_sum - <span class="number">1</span>; j &gt;= v; j--) &#123;</div><div class="line">                    dp[j] = max(dp[j], dp[j-v] + F[i]);</div><div class="line">                    <span class="keyword">if</span>(j &gt;= max_sum &amp;&amp; dp[j] &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        ans = max(ans, j - max_sum + dp[j]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>*max_sum + v - <span class="number">1</span>; j++) &#123;</div><div class="line">                    dp[j] = max(dp[j], dp[j-v] + F[i]);</div><div class="line">                    <span class="keyword">if</span>(j &gt;= max_sum &amp;&amp; dp[j] &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        ans = max(ans, j - max_sum + dp[j]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></n\leq100)$,每头牛有两个属性smartness(si)和funness(fi),现在需要从这n头牛中选出一部分牛,使得这些牛的smartness之和和funness之和最大,并且他们的smartness之和></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;:有N头牛$(0&lt;n\leq100)$,每头牛有两个属性smartness(si)和funness(fi),现在需要从这n头牛中选出一部分牛,使得这些牛的smartness之和和funness之和最大,并且他们的smartness之和 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 2505 The Country Fair</title>
    <link href="http://doldre.github.io/2015/11/03/2015-11-03-SOJ2505TheCountryFair/"/>
    <id>http://doldre.github.io/2015/11/03/2015-11-03-SOJ2505TheCountryFair/</id>
    <published>2015-11-03T02:40:46.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>: John 去参加国家展览,每个展台i在P[i]时刻都会有一个抽奖活动,从展台i走到展台j需要花费T[i][j]的时间,John在时刻0在1号站台,john想尽量多的参加抽奖活动,问他最多可以参加多少个抽奖活动.</p>
<p><strong>分析</strong>:这道题可以想成John从s号展台出发,然后最后走到e号展台,使其中路线当中抽奖过的展台越多越好.这样可以转化为一个最短路问题,考虑这样建图,如果John在i号展台抽奖,那么他必须提前到达i号展台并等到P[i]时刻,P[i] + T[i][j] &lt;= P[j] 那么John便可以再到j号展台抽奖,则从i到j连一条权值为-1的边,因为John在时刻0在1号展台,可以通过T[0][j] &lt;= P[j] 判断出John第一个可以抽奖的展台,对于每一个可以第一个抽奖的展台s,枚举终点e找到路径最小的path[s][e],这样-path[s][e] + 1就是John可以抽奖的最多的次数.其中求最短路径可以用floyd一次搞定.很经典的图论题.</p>
<p><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">400</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> dist[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn];</div><div class="line"><span class="keyword">int</span> P[maxn];</div><div class="line"><span class="keyword">int</span> N;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N) == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;P[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;dist[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(i == j) dp[i][j] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(P[i] + dist[i][j] &lt;= P[j]) &#123;</div><div class="line">                    dp[i][j] = <span class="number">-1</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    dp[i][j] = inf;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(dist[<span class="number">0</span>][i] &lt;= P[i]) &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">                    <span class="keyword">if</span>(dp[i][j] &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        ans = max(ans, -dp[i][j] + <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;: John 去参加国家展览,每个展台i在P[i]时刻都会有一个抽奖活动,从展台i走到展台j需要花费T[i][j]的时间,John在时刻0在1号站台,john想尽量多的参加抽奖活动,问他最多可以参加多少个抽奖活动.&lt;/p&gt;
&lt;p&gt;&lt;st
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 2113 数字游戏</title>
    <link href="http://doldre.github.io/2015/11/03/2015-11-03-SOJ2113%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/"/>
    <id>http://doldre.github.io/2015/11/03/2015-11-03-SOJ2113数字游戏/</id>
    <published>2015-11-03T02:27:53.000Z</published>
    <updated>2016-08-08T14:34:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>:丁丁最近沉迷于一个数字游戏之中。这个游戏看似简单，但丁丁在研究了许多天之后却发觉原来在简单的规则下想要赢得这个游戏并不那么容易。游戏是这样的，在你面前有一圈整数（一共n个），你要按顺序将其分为m个部分，各部分内的数字相加，相加所得的m个结果对10取模后再相乘，最终得到一个数k。游戏的要求是使你所得的k最大或者最小。 例如，对于下面这圈数字（n=4，m=2）：</p>
<p>当要求最小值时，((2-1) mod 10)×((4+3) mod 10)=1×7=7，要求最大值时，为((2+4+3) mod 10)×(-1 mod 10)=9×9=81。特别值得注意的是，无论是负数还是正数，对10取模的结果均为非负值。 丁丁请你编写程序帮他赢得这个游戏。<br><!--moer--><br>Input<br>输入有多组数据，对于每一组数据：第一行有两个整数，n（1&lt;=n&lt;=50）和m（1&lt;=m&lt;=9）。以下n行每行有个整数，其绝对值不大于104，按顺序给出圈中的数字，首尾相接。</p>
<p><strong>分析</strong>:很简单的dp,先不考虑起始点,以求最小值为例,对于序列a1, a2, a3 … an.定义dp[i][j]为前i个数字恰好分为j组时的最小值,转移方程为$dp[i][j] = min(dp[k][j-1] <em> a_(k+1) </em> … <em> a[i]) (0&lt;k&lt;i)$, 然后再枚举起点就可以做出来,总的时间复杂度为O(n^3</em>m)</p>
<p><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">9</span> + <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> A[maxn], S[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxm];</div><div class="line"><span class="keyword">int</span> dp2[maxn][maxm];</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t = A[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</div><div class="line">        A[i] = A[i + <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    A[n - <span class="number">1</span>] = t;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        sum += A[i];</div><div class="line">        S[i + <span class="number">1</span>] = sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</div><div class="line">                <span class="keyword">int</span> t = ((S[i] - S[j]) % <span class="number">10</span> + <span class="number">10</span>) % <span class="number">10</span>;</div><div class="line">                dp[i][k] = max(dp[i][k], dp[j][k - <span class="number">1</span>] * t);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[n][m];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP2</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp2, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp2));</div><div class="line">    dp2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</div><div class="line">                <span class="keyword">int</span> t = ((S[i] - S[j]) % <span class="number">10</span> + <span class="number">10</span>)%<span class="number">10</span>;</div><div class="line">                <span class="keyword">if</span>(dp2[j][k - <span class="number">1</span>] != <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">if</span>(dp2[i][k] == <span class="number">-1</span>) &#123;</div><div class="line">                        dp2[i][k] = dp2[j][k - <span class="number">1</span>] * t;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        dp2[i][k] = min(dp2[i][k], dp2[j][k<span class="number">-1</span>] * t);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp2[n][m];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> maxres = <span class="number">0</span>, minres = inf;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            next();</div><div class="line">            maxres = max(maxres, DP());</div><div class="line">            minres = min(minres, DP2());</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, minres, maxres);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;:丁丁最近沉迷于一个数字游戏之中。这个游戏看似简单，但丁丁在研究了许多天之后却发觉原来在简单的规则下想要赢得这个游戏并不那么容易。游戏是这样的，在你面前有一圈整数（一共n个），你要按顺序将其分为m个部分，各部分内的数字相加，相加所得的m
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 592D Super M</title>
    <link href="http://doldre.github.io/2015/11/01/2015-11-01-Codeforces592DSuperM/"/>
    <id>http://doldre.github.io/2015/11/01/2015-11-01-Codeforces592DSuperM/</id>
    <published>2015-11-01T13:17:00.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>:给出一颗节点数为n的树,其中有m个点必须要访问到,起点可以任意,每一次只能从当前点走到相邻点,每个点可以重复走,每走一步需要花费一个单位的时间,求把m个点走完最少需要花费的时间,并使得起点的编号最小.<br><strong>分析</strong>:这道题比赛的时候并没有一点思路,赛后看了官方的题解才知道怎样做,代码写的很挫,没想到wa了一发改了一个小地方后直接AC,还是有点小激动.</p>
<p><img src="http://img.blog.csdn.net/20151101210305487" alt="这里写图片描述"><br>1.根据观察可以发现,起点一定是m个点中的一个,很明显如果起点不是红色的点,你需要先走到一个红色的点上去.<br>2.如果想要走完所有的m个点,则一定会走完一颗子树,这颗子树包含这所有的m个点,换句话说这m个点可以唯一确定一颗子树<br>3.如果题目要求最后还要返回起点的话,可以观察出需要花费的时间 = 这颗子树的边数 <em> 2.<br>4.不需要返回,则可以在这颗子树上找到一条最长的边,也就是这棵树的直径,然后沿着这个直径访问完所有的m个点,这样需要的时间为,子树的边数</em>2 - 直径的边数.<br>5.这样问题就转化问,先求出这颗子树,然后找到一条端点尽量小的,最长的直径.<br>6.求树的直径有个经典思想,可以从任意一个点出发,然后dfs(bfs)找到距离该点最远的点t,再从t点出发找到一个距离t点最远的点s,则s-t就是树的直径.具体证明网上有很多,这里就不再累赘.<br>7.所以这里可以从任意一个红色的点出发,找到这颗子树,并找到一个距离最远且编号尽量小的端点,然后在这颗子树上在进行一次dfs就可以解决这个问题.这里只需要注意更新距离的时候同时还要考虑端点的编号大小即可.</p>
<p><strong>代码</strong>:<br>代码写的有点挫,个人比较懒,也懒得去重构,对不住各位看官.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">123456</span> + <span class="number">5</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> On[maxn];</div><div class="line"><span class="keyword">int</span> A[maxn];</div><div class="line"><span class="keyword">int</span> tar, d;</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> s)</span></span></div><div class="line">&#123;</div><div class="line">    vis[s] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[s].size(); i++) &#123;</div><div class="line">        <span class="keyword">int</span> u = G[s][i];</div><div class="line">        <span class="keyword">if</span>(!vis[u]) &#123;</div><div class="line">            dis[u] = dis[s] + <span class="number">1</span>;</div><div class="line">            flag |= dfs1(u);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(A[s]) &#123;</div><div class="line">        flag = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(dis[s] &gt; d || (dis[s] == d &amp;&amp; s &lt; tar)) &#123;</div><div class="line">            d = dis[s];</div><div class="line">            tar = s;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(flag) &#123;</div><div class="line">        On[s] = <span class="literal">true</span>;</div><div class="line">        cnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> s)</span></span></div><div class="line">&#123;</div><div class="line">    vis[s] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[s].size(); i++) &#123;</div><div class="line">        <span class="keyword">int</span> u = G[s][i];</div><div class="line">        <span class="keyword">if</span>(!vis[u] &amp;&amp; On[u]) &#123;</div><div class="line">            dis[u] = dis[s] + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(dis[u] &gt; d || (dis[u] == d &amp;&amp; u &lt; tar)) &#123;</div><div class="line">                d = dis[u];</div><div class="line">                tar = u;</div><div class="line">            &#125;</div><div class="line">            dfs2(u);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        A[x] = <span class="literal">true</span>;</div><div class="line">        tar = x;</div><div class="line">    &#125;</div><div class="line">    fill(dis, dis + n + <span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">    fill(vis, vis + n + <span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">    d = <span class="number">0</span>;</div><div class="line">    dis[tar] = <span class="number">0</span>;</div><div class="line">    dfs1(tar);</div><div class="line">    <span class="keyword">int</span> k1 = tar;</div><div class="line">    fill(dis, dis + n + <span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">    fill(vis, vis + n + <span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">    d = <span class="number">0</span>;</div><div class="line">    dis[tar] = <span class="number">0</span>;</div><div class="line">    dfs2(tar);</div><div class="line">    <span class="keyword">int</span> ans = min(k1, tar);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n%d"</span>, ans, <span class="number">2</span>*(cnt<span class="number">-1</span>) - d);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;:给出一颗节点数为n的树,其中有m个点必须要访问到,起点可以任意,每一次只能从当前点走到相邻点,每个点可以重复走,每走一步需要花费一个单位的时间,求把m个点走完最少需要花费的时间,并使得起点的编号最小.&lt;br&gt;&lt;strong&gt;分析&lt;/s
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 590B  Chip &#39;n Dale Rescue Rangers</title>
    <link href="http://doldre.github.io/2015/10/27/2015-10-27-Codeforces590BChip&#39;nDaleRescueRangers/"/>
    <id>http://doldre.github.io/2015/10/27/2015-10-27-Codeforces590BChip&#39;nDaleRescueRangers/</id>
    <published>2015-10-27T15:50:00.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题意</strong>:<br>一艘飞船相对空气的最大速度是V,一开始风速是$\vec F_1$(x1,y1), T秒后风速变为$\vec F_2$(x2, y2),求从s点(a1,b1)到e点(a2,b2)的最短时间.输入保证飞船相对空气的最大速度大于风速.<br><strong>分析</strong>:<br>这道题很巧妙的利用了向量的性质,当最短时间$t \leq T$的时候很明显可以直接计算出答案,现在考虑$t  &gt; T$的时候, 设飞船前T秒的速度为$\vec v_1$, 后t-T秒的速度为$\vec v_2$, 这样可以得到等式$(\vec F_1+\vec v_1)<em>T + (\vec F_2 + \vec v_2) </em> (t-T) = \overrightarrow {se}$. 然后进行变形可以得到$\vec F_1<em>T + \vec F_2</em>(t-T) + \vec v_1<em>T + \vec v_2 </em> (t-T) =\overrightarrow {se}$, 这样因为$\vec F_1, \vec F_2$已知,可以看出t给出后,前半部分可以直接计算出来,后半部分$v_1, v_2$肯定取最大速度最快,这样就可以直接二分t,然后判断这个等式是否能够成立,就可以计算出来最小速度.不看数学表达式,这道题有个很物理的想法,风和飞船速度的合速度可以拆开,让风先吹ts,看飞船落在哪个地方,然后让飞船满速向目标地点前进,判断在给定时间t内,飞船能否飞到目标地点.因为如果ts内不能达到,肯定&lt;=ts内也不能达到.所以就可以二分解决这个问题.<br><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf  = <span class="number">1e15</span>;</div><div class="line"><span class="keyword">struct</span> P</div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">    P(<span class="keyword">double</span> x = <span class="number">0</span>, <span class="keyword">double</span> y = <span class="number">0</span>):x(x), y(y) &#123;&#125;</div><div class="line">    P <span class="keyword">operator</span> + (P b) &#123;</div><div class="line">        <span class="keyword">return</span> P(x + b.x, y + b.y);</div><div class="line">    &#125;</div><div class="line">    P <span class="keyword">operator</span> * (<span class="keyword">double</span> k) &#123;</div><div class="line">        <span class="keyword">return</span> P(k*x, k*y);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(P a, P b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y));</div><div class="line">&#125;</div><div class="line"></div><div class="line">P s, e;</div><div class="line"></div><div class="line">P v1, v2;</div><div class="line"><span class="keyword">double</span> maxv, T;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> t)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> lt = t - T;</div><div class="line">    P cur = s;</div><div class="line">    cur = cur + (v1*min(t, T));</div><div class="line">    <span class="keyword">if</span>(lt &gt; <span class="number">0</span>) &#123;</div><div class="line">        cur = cur + (v2 * lt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> d = dist(cur, e);</div><div class="line">    <span class="keyword">return</span> maxv*t &gt; d;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; s.x &gt;&gt; s.y &gt;&gt; e.x &gt;&gt; e.y;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; maxv &gt;&gt; T;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt;  v1.x &gt;&gt; v1.y &gt;&gt; v2.x &gt;&gt; v2.y;</div><div class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e15</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</div><div class="line">        <span class="keyword">double</span> m = (l + r) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(check(m)) &#123;</div><div class="line">            r = m;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            l = m;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.9f\n"</span>, l);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;:&lt;br&gt;一艘飞船相对空气的最大速度是V,一开始风速是$\vec F_1$(x1,y1), T秒后风速变为$\vec F_2$(x2, y2),求从s点(a1,b1)到e点(a2,b2)的最短时间.输入保证飞船相对空气的最大速度大于风速
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SOJ 4438 Censor (字符串，kmp，hash，经典）</title>
    <link href="http://doldre.github.io/2015/09/10/2015-09-10-SOJ4438Censor(%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8Ckmp%EF%BC%8Chash%EF%BC%8C%E7%BB%8F%E5%85%B8%EF%BC%89/"/>
    <id>http://doldre.github.io/2015/09/10/2015-09-10-SOJ4438Censor(字符串，kmp，hash，经典）/</id>
    <published>2015-09-10T07:14:09.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>题意：两个字符串w, p。 执行以下操作，1.如果p中含有w，将第一个遇到的w删除，剩下的连接起来。2.如果p中还有w重复1，否则输出处理后的字符串。</li>
<li>思路：可以用一个栈来处理这个问题，其中匹配可以采用kmp算法，也可以用hash。</li>
<li>代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//kmp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">char</span> w[maxn], p[maxn];</div><div class="line"><span class="keyword">char</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> next[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> next[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</div><div class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(j &lt; len) &#123;</div><div class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span> || str[j] == str[k]) &#123;</div><div class="line">            j++; k++;</div><div class="line">            <span class="keyword">if</span>(str[j] == str[k]) &#123;</div><div class="line">                next[j] = next[k];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                next[j] = k;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            k = next[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, w, p) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="comment">//memset(ans, 0, sizeof(ans));</span></div><div class="line">        getnext(w, next);</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sta;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; mt;</div><div class="line">        <span class="keyword">int</span> plen = <span class="built_in">strlen</span>(p), wlen = <span class="built_in">strlen</span>(w);</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(j &lt; plen) &#123;</div><div class="line">            <span class="keyword">if</span>(k == <span class="number">-1</span> || p[j] == w[k]) &#123;</div><div class="line">                j++; k++;</div><div class="line">                sta.push(p[j<span class="number">-1</span>]);</div><div class="line">                mt.push(k);</div><div class="line">                <span class="keyword">if</span>(k == wlen) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wlen; i++) &#123;</div><div class="line">                        sta.pop();</div><div class="line">                        mt.pop();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(mt.empty()) &#123;</div><div class="line">                        k = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> k = mt.top();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                k = next[k];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> i = sta.size() - <span class="number">1</span>;</div><div class="line">        ans[i+<span class="number">1</span>] = <span class="string">'\0'</span>;</div><div class="line">        <span class="keyword">while</span>(!sta.empty()) &#123;</div><div class="line">            ans[i--] = sta.top();</div><div class="line">            sta.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//hash</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> seed = <span class="number">1331</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>  ull;</div><div class="line"><span class="keyword">char</span> w[maxn], p[maxn];</div><div class="line"><span class="keyword">char</span> ans[maxn];</div><div class="line">ull <span class="number">_</span>hash[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, w, p)) &#123;</div><div class="line">        ull mhash = <span class="number">0</span>;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> wlen = <span class="built_in">strlen</span>(w), plen = <span class="built_in">strlen</span>(p);</div><div class="line">        ull k = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wlen; i++) &#123;</div><div class="line">            mhash = mhash*seed + w[i];</div><div class="line">            k *= seed;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sta;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, len = <span class="number">1</span>;</div><div class="line">        <span class="number">_</span>hash[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(; i &lt; plen; i++, len++) &#123;</div><div class="line">            <span class="number">_</span>hash[len] = <span class="number">_</span>hash[len - <span class="number">1</span>] * seed + p[i];</div><div class="line">            sta.push(p[i]);</div><div class="line">            <span class="keyword">if</span>(len &gt;= wlen) &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="number">_</span>hash[len] - <span class="number">_</span>hash[len - wlen]*k == mhash) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; wlen; j++) &#123;</div><div class="line">                        sta.pop();</div><div class="line">                    &#125;</div><div class="line">                    len = len - wlen ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> j = sta.size();</div><div class="line">        ans[j--] = <span class="string">'\0'</span>;</div><div class="line">        <span class="keyword">while</span>(!sta.empty()) &#123;</div><div class="line">            ans[j--] = sta.top();</div><div class="line">            sta.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题意：两个字符串w, p。 执行以下操作，1.如果p中含有w，将第一个遇到的w删除，剩下的连接起来。2.如果p中还有w重复1，否则输出处理后的字符串。&lt;/li&gt;
&lt;li&gt;思路：可以用一个栈来处理这个问题，其中匹配可以采用kmp算法，也可以用hash。&lt;/li&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 156c Cipher</title>
    <link href="http://doldre.github.io/2015/09/09/2015-09-09-Codeforces156cCipher/"/>
    <id>http://doldre.github.io/2015/09/09/2015-09-09-Codeforces156cCipher/</id>
    <published>2015-09-09T11:41:00.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>题意：给一个字符串s，有两种操作，对于1&lt;=p&lt;|s|，1.s[p]++, s[p+1]–2.s[p]–,s[p+1]++。如果进行操作后 s[p]或者s[p+1]不为小写字母，则操作非法。可以进行无数次这样的操作，通过这两个操作可以变化出多少种不同的字符串。</li>
<li>思路：可以发现无论进行多少次这样的操作，字符串s每一位的ascii码值之和都不会改变，并且对于任意两个长度相同并且每一位的ascii码值之和的字符串都可以通过有限次的这两种操作转换。所以这个问题等价于长度为n，每一位的ascii值之和为sum的字符串有多少种。到这里就很容易想到用dp来解决这个问题。定义dp[i][j]表示长度为i，ascii码之和为j的字符串有多少种，可以得出状态转移方程为$dp[i+1][j] = \sum_{k = ‘a’，j - k&gt;0}^{‘z’} dp[i][j-k]$。</li>
<li>小小的感想：其实如果这道题直接让求长度为n，每一位的ascii码值之和相加为sum的字符串有多少种，这道题就是一道很水的题目了，然而换了一种方式来提出这个问题就对思维的要求高了不少，所以遇到问题的时候，根据题目中已知的条件，找找能不能得到一些有用的结论，然后尝试是否可以通过这些结论将题目转化为一个更简单的模型，是一个很有效的思维方法。</li>
<li>代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000000</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> dp[<span class="number">100</span>][<span class="number">2600</span>];</div><div class="line"><span class="keyword">char</span> str[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</div><div class="line">        dp[<span class="number">0</span>][i] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2600</span>; j++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; k++) &#123;</div><div class="line">                <span class="keyword">if</span>(j - k &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    dp[i][j] = (dp[i][j] + dp[i<span class="number">-1</span>][j-k]) % mod;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    initial();</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;str);</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            sum += str[i] - <span class="string">'a'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[len<span class="number">-1</span>][sum] - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题意：给一个字符串s，有两种操作，对于1&amp;lt;=p&amp;lt;|s|，1.s[p]++, s[p+1]–2.s[p]–,s[p+1]++。如果进行操作后 s[p]或者s[p+1]不为小写字母，则操作非法。可以进行无数次这样的操作，通过这两个操作可以变化出多少种不同
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 156b Suspects</title>
    <link href="http://doldre.github.io/2015/09/08/2015-09-08-Codeforces156bSuspects/"/>
    <id>http://doldre.github.io/2015/09/08/2015-09-08-Codeforces156bSuspects/</id>
    <published>2015-09-08T14:45:48.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>题意: 询问n个嫌疑人,每个人有两种回答,+i和-i, +i表示第i个人是罪犯,-i表示第i个人不是罪犯,每个人能且只能回答一次,已知有m个人说的是实话,问第i个人说的是实话还是谎话,或者不能确定.</li>
<li>思路: 这个题其实重点就是根据有m个人说实话去判断谁是罪犯. 朴素的思路就是假设第i个人是罪犯,然后扫描所有人的回答,检测是否有m个人在说实话.但是这样复杂度是$O(n^2)$. 接下来就是如果去优化这个思路.假设第i个人是罪犯,可以知道如果有m个人说第i个人是罪犯,说某人不是罪犯的总人数为t_n,说第i个人不是罪犯的人数是n,那么可以知道此时说真话的人数是m + t_n - n.所以如果预处理出m,t_n,n就可以以O(1)的复杂度计算第i个人是不是罪犯,而预处理m,t_n,n的复杂度是O(n),随意最终的时间复杂度是O(n).</li>
<li>一点小小的感想: 其实这道题是一个超级大水题,从题目编号就能看出来,但是还是将其写成题解是因为最开始思路不清晰,又用map又用set的,虽然把题目ac了,但是走了许多的弯路.代码也是修修补补的很丑. 一个算法的好坏的评价标准自己认为不能单单从时空复杂度来评判,代码的优美程度(简洁程度)也是很重要的,并且事实是往往很优美的算法也具有十分高效的效率. 所以在做一道题目的时候1.如果不能将这个算法<strong>从头到尾</strong>想清楚,就最好在多思考下,将细节已经算法的正确性想清楚后再开始写,不然很有可能做很多无用功,写了很多出来了,却发现从根本上就是错的.2.如果这个算法需要很多特判,比如用这个算法需要考虑非常多的特殊情况,需要将很多的情况分开处理,必须需要用很多的if语句,并且是<strong>不能一眼就看清楚流程</strong>的那种,也最好的停下来在多想一想,通常这种不会是最优解法,并且很有可能你会少考虑一些情况,进而整个算法也是错误的.最好的情况是这些复杂的不同的情况能够同一成一个问题解决.</li>
<li>总结:一个好的算法应该是简洁而优雅的</li>
<li>代码:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> yes[maxn], no[maxn], ans[maxn];</div><div class="line"><span class="keyword">int</span> A[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> tot_yes, tot_no;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        A[i] = x;</div><div class="line">        <span class="keyword">if</span>(x &gt; <span class="number">0</span>) &#123;</div><div class="line">            tot_yes++;</div><div class="line">            yes[x]++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tot_no++;</div><div class="line">            no[-x]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(yes[i] + tot_no - no[i] == m) &#123;</div><div class="line">            ans[i] = <span class="number">1</span>;</div><div class="line">            cnt++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> x = A[i];</div><div class="line">        <span class="keyword">if</span>(x &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(ans[x]) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, cnt &gt; <span class="number">1</span> ? <span class="string">"Not defined"</span>: <span class="string">"Truth"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Lie\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            x = -x;</div><div class="line">            <span class="keyword">if</span>(ans[x]) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, cnt &gt; <span class="number">1</span> ? <span class="string">"Not defined"</span>: <span class="string">"Lie"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Truth\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题意: 询问n个嫌疑人,每个人有两种回答,+i和-i, +i表示第i个人是罪犯,-i表示第i个人不是罪犯,每个人能且只能回答一次,已知有m个人说的是实话,问第i个人说的是实话还是谎话,或者不能确定.&lt;/li&gt;
&lt;li&gt;思路: 这个题其实重点就是根据有m个人说实话
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 156D Clues (图论, 并查集, 卡特兰数)</title>
    <link href="http://doldre.github.io/2015/09/07/2015-09-07-Codeforces156DClues(%E5%9B%BE%E8%AE%BA,%E5%B9%B6%E6%9F%A5%E9%9B%86,%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0)/"/>
    <id>http://doldre.github.io/2015/09/07/2015-09-07-Codeforces156DClues(图论,并查集,卡特兰数)/</id>
    <published>2015-09-07T11:56:00.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>题意:给出一个森林,问用最少的边将其连接成一颗树有多少种连接方式.</li>
<li>思路:这道题是一个推导公式的题,涉及到树的生成数计数的问题,但是我现在仍然不知道题目中的n^p是怎么用得到的,先挖个坑在这儿,以后明白了再来填坑.</li>
<li>代码:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> par[maxn];</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> x == par[x] ? x : par[x] = find(par[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) par[i] = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">        par[find(a)] = find(par[b]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        cnt[find(i)]++;</div><div class="line">    &#125;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(i == par[i]) &#123;</div><div class="line">            ans = ans*cnt[i]%k;</div><div class="line">            p++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(p == <span class="number">1</span>) &#123;</div><div class="line">        ans /= cnt[find(<span class="number">1</span>)];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p - <span class="number">2</span>; i++) &#123;</div><div class="line">        ans = ans*n%k;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题意:给出一个森林,问用最少的边将其连接成一颗树有多少种连接方式.&lt;/li&gt;
&lt;li&gt;思路:这道题是一个推导公式的题,涉及到树的生成数计数的问题,但是我现在仍然不知道题目中的n^p是怎么用得到的,先挖个坑在这儿,以后明白了再来填坑.&lt;/li&gt;
&lt;li&gt;代码:&lt;f
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 482C Game with strings（状压dp 经典题目，经典！！）</title>
    <link href="http://doldre.github.io/2015/09/07/2015-09-07-Codeforces482CGamewithstrings%EF%BC%88%E7%8A%B6%E5%8E%8Bdp%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%EF%BC%8C%E7%BB%8F%E5%85%B8%EF%BC%81%EF%BC%81%EF%BC%89/"/>
    <id>http://doldre.github.io/2015/09/07/2015-09-07-Codeforces482CGamewithstrings（状压dp经典题目，经典！！）/</id>
    <published>2015-09-07T08:25:00.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>题意：给你n个长度为l的字符串，$1&lt;=n&lt;=50$,$1&lt;=l&lt;=20$,选出一个字符串，每一次操作你可以知道这个字符串某个位置的字符，问多少次可以操作可以唯一确定这个字符串是哪个。求出对于所有字符串，可以唯一确定一个字符串的操作数的期望。</li>
<li>思路：这是一个概率题，概率题最重要的就是不重复不遗漏。因为这里l的长度只有20，所以可以考虑枚举每一次猜的哪个位置。比如对于abc，abd这两个字符串，知道1,2两个位置都是不能知道具体是哪一个的，可以看出在一个字符串不能被确定的时候，前面的操作的顺序是无关的，因此枚举所有的操作的复杂度为$l*2^l%$。确定一个特定的操作能确定哪些字符串可以使用状态压缩的方法来解决。具体实现见代码以及注释。</li>
<li>代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注释写的很长，请复制到编辑器里面全屏查看。</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">20</span>;</div><div class="line">LL identity[<span class="number">1</span>&lt;&lt;MAXM];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> s[MAXN][MAXM + <span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    getchar();</div><div class="line">    <span class="comment">//input</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123; <span class="comment">//枚举所有字符串的两两组合</span></div><div class="line">            <span class="keyword">int</span> mask = <span class="number">0</span>;           <span class="comment">//mask表示一个确定的操作，比如 00101表示知道了第三位和第一位的字符</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; k++) &#123;</div><div class="line">                <span class="keyword">if</span>(s[i][k] == s[j][k]) &#123;</div><div class="line">                    mask |= (<span class="number">1</span>&lt;&lt;k); <span class="comment">//如果当前两个字符串该位相同，这将mask对应的位置1，最后mask表示通过当前操作无法区分这两个字符串。</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            identity[mask] |= (<span class="number">1L</span>L&lt;&lt;i)|(<span class="number">1L</span>L&lt;&lt;j); <span class="comment">//把i，j加进通过mask操作无法确定的字符串集合里，这里同样是状态压缩</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mask = (<span class="number">1</span>&lt;&lt;len) - <span class="number">1</span>; mask &gt;= <span class="number">0</span>; mask--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span>((mask&gt;&gt;i)&amp;<span class="number">1</span>) &#123; <span class="comment">//这里是一个dp，通过这一步，</span></div><div class="line">                              <span class="comment">//dentity[mask]表示的就是所有通过mask操作均不能确定的字符串集合。（上面一步只是确定了刚好通过mask操作不能确定的集合</span></div><div class="line">                identity[mask^(<span class="number">1</span>&lt;&lt;i)] |= identity[mask]; <span class="comment">//如果00110操作不能确定的字符串，很明显00100,00010操作也不能确定</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//计算每一步操作能够确定的字符串的数量，进而计算出期望</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; (<span class="number">1</span>&lt;&lt;len); mask++) &#123;</div><div class="line">        <span class="keyword">int</span> moves = <span class="number">__b</span>uiltin_popcount(mask) + <span class="number">1</span>; <span class="comment">//这里为什么+1下面解释</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; k++) &#123;</div><div class="line">            <span class="keyword">if</span>(!((mask&gt;&gt;k)&amp;<span class="number">1</span>)) &#123; <span class="comment">//如果mask的第k位为0</span></div><div class="line">                LL dif = identity[mask]^identity[mask^(<span class="number">1</span>&lt;&lt;k)]; <span class="comment">//这里列子，如果00110不能确定a,b,c三个字符串，而00111不能确定a，b两个字符串，</span></div><div class="line">                                                                <span class="comment">//很明显可以得出c可以通过00111这个操作确定。这里通过异或就可以得出通过mask|k的操作可以确定的字符串</span></div><div class="line">                                                                <span class="comment">//所以上面的操作次数是 mask中的1的数量+1，因为还需要另外一步k</span></div><div class="line">                <span class="keyword">if</span>(dif == <span class="number">0</span>) <span class="keyword">continue</span>;      <span class="comment">//mask|k一个字符串都不能确定。</span></div><div class="line">                <span class="keyword">int</span> cnt = <span class="number">__b</span>uiltin_popcountll(dif); <span class="comment">//计算mask|k能确定的字符串数量</span></div><div class="line">                <span class="keyword">long</span> <span class="keyword">double</span> curexp = cnt * moves; <span class="comment">//因为现在算的是把所有字符串全部确定的期望，所以每一个字符串都需要moves次的操作</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; moves - <span class="number">1</span>; i++) &#123;</div><div class="line">                    curexp *= (<span class="keyword">long</span> <span class="keyword">double</span>)(moves - i - <span class="number">1</span>) / (<span class="keyword">long</span> <span class="keyword">double</span>)(len - i); <span class="comment">//操作数乘上当前操作发生的概率，P = &#123;1/C_n^&#123;moves-1&#125;&#125;*&#123;1/n - (moves - 1)&#125;</span></div><div class="line">                &#125;</div><div class="line">                curexp /= (<span class="keyword">long</span> <span class="keyword">double</span>)(len - moves + <span class="number">1</span>); <span class="comment">//依然是计算概率见上面的公式</span></div><div class="line">                ans += curexp; <span class="comment">//根据加法原理，当前操作的期望加到总的期望里面去</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ans /= (<span class="keyword">long</span> <span class="keyword">double</span>)n; <span class="comment">//通过上面操作ans计算出的是所有字符串需要的操作的期望之和，所以除以n才是一个字符串需要的操作数的期望。</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">15</span>) &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出答案</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题意：给你n个长度为l的字符串，$1&amp;lt;=n&amp;lt;=50$,$1&amp;lt;=l&amp;lt;=20$,选出一个字符串，每一次操作你可以知道这个字符串某个位置的字符，问多少次可以操作可以唯一确定这个字符串是哪个。求出对于所有字符串，可以唯一确定一个字符串的操作数的期
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 487b Strip, dp + RMQ（经典）</title>
    <link href="http://doldre.github.io/2015/09/06/2015-09-06-Codeforces487bStrip,dp+RMQ%EF%BC%88%E7%BB%8F%E5%85%B8%EF%BC%89/"/>
    <id>http://doldre.github.io/2015/09/06/2015-09-06-Codeforces487bStrip,dp+RMQ（经典）/</id>
    <published>2015-09-06T01:19:00.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>题意：有一个长度为n的数列，问是否能把这个数列切成连续的几段，使得 1.每一段长度大于等于l；2.每一段中的最大值和最小值之差小于等于s。如果能输出能切成的最小的段数，不能输出-1。</li>
<li><p>思路：非常经典的dp题目，假设dp[i]表示$a_1…a_i$这个序列能切成的最小段数，如果不能dp[i] = INF。现在问题是</p>
<blockquote>
<p>1.如何找到状态转移方程。考虑如果l = 3， s = 1，如果$a<em>i = 5$, $a</em>{i-1} = 3$, 很明显$a_1…a_i$ 无论如何都不能切成满足条件的小段，所以dp[i]=INF。再考虑如果对于$a<em>i$, $a</em>{j-k}…a_i$,  $a_j…a_i$,都是满足条件的一段，很容易想到dp[i] = min(dp[j-k]…dp[j]) + 1。</p>
<ol>
<li>有了状态转移方程，现在问题便是如何维护当前区间的最大值最小值以及与$a_i$配对，满足条件的dp[j-k]…dp[j]的最小值，即RMQ问题。这里用ST表，线段树都可以，但是因为这里可以采用尺取法（二指针），区间是连续移动的（没有跳跃），所以还可以使用multiset 和 单调队列 来维护。因为这里n 只有$10^5$ 所以使用multiset的复杂度是nlogn完全没有问题，使用单调队列的话是O(n),但是如果单调队列用标准库的deque实现的话，常数通常会比较大，对于数据量比较大的题目还是推荐自己手写。</li>
</ol>
</blockquote>
</li>
<li><p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*************************************************************************</span></div><div class="line"> *Multiset 版本</div><div class="line"> ************************************************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> A[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n, s, l;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;s, &amp;l);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; pre, cur;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        cur.insert(A[i]);</div><div class="line">        <span class="keyword">while</span>(*cur.rbegin() - *cur.begin() &gt; s) &#123;</div><div class="line">            cur.erase(cur.find(A[j]));</div><div class="line">            <span class="keyword">if</span>(pre.find(dp[j - <span class="number">1</span>]) != pre.end()) &#123;</div><div class="line">                pre.erase(pre.find(dp[j - <span class="number">1</span>]));</div><div class="line">            &#125;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i - j + <span class="number">1</span> &gt;= l) pre.insert(dp[i - l]);</div><div class="line">        <span class="keyword">if</span>(pre.empty()) &#123;</div><div class="line">            dp[i] = INF;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            dp[i] = *pre.begin() + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = dp[n];</div><div class="line">    <span class="keyword">if</span>(ans &gt;= INF) ans = <span class="number">-1</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*************************************************************************</span></div><div class="line"> * 单调队列版本</div><div class="line"> ************************************************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> A[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"></div><div class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; min_que, max_que, pre_que;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(!min_que.empty() &amp;&amp; x &lt; min_que.back()) min_que.pop_back();</div><div class="line">    min_que.push_back(x);</div><div class="line">    <span class="keyword">while</span>(!max_que.empty() &amp;&amp; x &gt; max_que.back()) max_que.pop_back();</div><div class="line">    max_que.push_back(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!min_que.empty() &amp;&amp; x == min_que.front()) min_que.pop_front();</div><div class="line">    <span class="keyword">if</span>(!max_que.empty() &amp;&amp; x == max_que.front()) max_que.pop_front();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(!pre_que.empty() &amp;&amp; x &lt; pre_que.back()) pre_que.pop_back();</div><div class="line">    pre_que.push_back(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!pre_que.empty() &amp;&amp; pre_que.front() == x) pre_que.pop_front();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n, s, l;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;s, &amp;l);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        add(A[i]);</div><div class="line">        <span class="keyword">while</span>(max_que.front() - min_que.front() &gt; s) &#123;</div><div class="line">            del(A[j]);</div><div class="line">            pre_del(dp[j<span class="number">-1</span>]);</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i - j + <span class="number">1</span> &gt;= l) pre_add(dp[i-l]);</div><div class="line">        <span class="keyword">if</span>(pre_que.empty()) dp[i] = INF;</div><div class="line">        <span class="keyword">else</span> dp[i] = pre_que.front() + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = dp[n];</div><div class="line">    <span class="keyword">if</span>(ans &gt;= INF) ans = <span class="number">-1</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题意：有一个长度为n的数列，问是否能把这个数列切成连续的几段，使得 1.每一段长度大于等于l；2.每一段中的最大值和最小值之差小于等于s。如果能输出能切成的最小的段数，不能输出-1。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;思路：非常经典的dp题目，假设dp[i]表示$a_1…
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 460d Little Victor and Set</title>
    <link href="http://doldre.github.io/2015/09/04/2015-09-04-Codeforces460dLittleVictorandSet/"/>
    <id>http://doldre.github.io/2015/09/04/2015-09-04-Codeforces460dLittleVictorandSet/</id>
    <published>2015-09-04T08:15:53.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>题意：给出一个范围[l,r],以及一个数k，让从[l,r]这个区间中选不超过k个数a1, a2, a3…an,使f = a1^a2^a3…^an最小。</li>
<li>思路：就是一个找规律的数学题。可以先从两个的入手，然后再从4个的入手，最难得其实是3个数的情况，但是仔细分析不难观察到其规律，代码已经很能说明思路了就不再反复写了。</li>
<li>代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*************************************************************************</span></div><div class="line">	&gt; File Name: 460d.cpp</div><div class="line">	&gt; Author: Mathon</div><div class="line">	&gt; Mail: luoxinchen96@qq.com</div><div class="line">	&gt; Created Time: 2015年09月04日 星期五 14时53分25秒</div><div class="line"> ************************************************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    LL l, r, k;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; k;</div><div class="line">    <span class="keyword">if</span>(k &gt;= <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(LL i = l; i + <span class="number">3</span> &lt;= r; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"0\n4\n%I64d %I64d %I64d %I64d\n"</span>, i, i + <span class="number">1</span>, i + <span class="number">2</span>, i + <span class="number">3</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(k &gt;= <span class="number">3</span>) &#123;</div><div class="line">        LL t = <span class="number">3</span>;</div><div class="line">        LL x = l;</div><div class="line">        <span class="keyword">while</span>(x &gt; <span class="number">0</span>) &#123;</div><div class="line">            x &gt;&gt;= <span class="number">1</span>;</div><div class="line">            t &lt;&lt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        t &gt;&gt;= <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(t &lt;= r) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0\n3\n%I64d %I64d %I64d\n"</span>, t, l^t, l);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(k &gt;= <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(LL i = l; i + <span class="number">1</span> &lt;= r; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"1\n2\n%I64d %I64d\n"</span>, i, i+<span class="number">1</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(k &gt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>((l^r) &lt; l) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n2\n%I64d %I64d\n"</span>, l^r, l, r);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n1\n%I64d\n"</span>, l, l);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题意：给出一个范围[l,r],以及一个数k，让从[l,r]这个区间中选不超过k个数a1, a2, a3…an,使f = a1^a2^a3…^an最小。&lt;/li&gt;
&lt;li&gt;思路：就是一个找规律的数学题。可以先从两个的入手，然后再从4个的入手，最难得其实是3个数的情
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 460c Present</title>
    <link href="http://doldre.github.io/2015/09/04/2015-09-04-Codeforces460cPresent/"/>
    <id>http://doldre.github.io/2015/09/04/2015-09-04-Codeforces460cPresent/</id>
    <published>2015-09-04T05:53:06.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>题意：有n多初始高度不同的花，每次浇水可以浇相邻的w朵花，每一次浇水花都会长高一个单位，可以浇m次，问怎样浇水才能使最低的那朵花最高。最高是多少。</li>
<li>思路：很显然的最大化最小值问题。仔细观察可以发现并没有一个可以直接算出答案的思路，但是考虑到如果如果最低能够达到H的高度，那么比H低的高度也肯定都可以满足，如果不能够达到H的高度，比H高的高度也就不能达到，所以如果给定一个高度H，可以很方便的判断是否所有的花都能够达到H的高度，变可以试用二分快速的解决问题。——–判断：现在问题转化为给定一个高度H，如何判断是否所有的花都能达到这个高度。很容易想到的是，从左到右依次贪心，如果当前的花加上前面已经浇水生长的高度还不能达到高度H，就继续浇水补奇到高度H，最后判断要是所有花的高度达到H的浇水次数是否超过m次。这里涉及到一个点被区间覆盖了多少次的记录问题，比如要在[a,b]区间浇水c次，可以建立一个数组cnt，然后cnt[a] += c, cnt[b+1] -= c。要计算p位置被区间覆盖了多少次，只需要计算[0,p]的前缀和就好了。 回到这道题，所以这里的判断可以在O(n)的时间内解决。加上二分求最值，整道题的复杂度是O(nlogn)。</li>
<li><p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = (<span class="number">1</span>&lt;&lt;<span class="number">30</span>) - <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> h[maxn], d[maxn];</div><div class="line"><span class="keyword">int</span> n, m, w;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        sum += d[i];</div><div class="line">        <span class="keyword">int</span> t = x - h[i] - sum;</div><div class="line">        <span class="keyword">if</span>(t &gt; <span class="number">0</span>) &#123;</div><div class="line">            cnt += t;</div><div class="line">            sum += t;</div><div class="line">            d[i] += t;</div><div class="line">            d[i+w] -= t;</div><div class="line">            <span class="keyword">if</span>(cnt &gt; m) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;w);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = INF;</div><div class="line">    <span class="keyword">while</span>(l &lt; r - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(!judge(m))&#123;</div><div class="line">            r = m;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            l = m;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>血泪史：因为数组访问越界wa了很多次，并且一直没有找到原因，在使用数组的时候，一定要注意是否访问越界，尤其是涉及到数组下标的计算操作！！</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题意：有n多初始高度不同的花，每次浇水可以浇相邻的w朵花，每一次浇水花都会长高一个单位，可以浇m次，问怎样浇水才能使最低的那朵花最高。最高是多少。&lt;/li&gt;
&lt;li&gt;思路：很显然的最大化最小值问题。仔细观察可以发现并没有一个可以直接算出答案的思路，但是考虑到如果
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HDU5418 Victor and World</title>
    <link href="http://doldre.github.io/2015/08/28/2015-08-28-HDU5418VictorandWorld/"/>
    <id>http://doldre.github.io/2015/08/28/2015-08-28-HDU5418VictorandWorld/</id>
    <published>2015-08-28T03:10:00.000Z</published>
    <updated>2016-08-08T11:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>#HDU5418 Victor and World#</p>
<ul>
<li>题意:很裸的旅行家问题</li>
<li>思路:旅行家问题裸模板</li>
<li>代码:这里贴三分代码,一份记忆化搜索,一份dp,一份dp的小优化.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">\\记忆化搜索</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">16</span>;</div><div class="line"><span class="keyword">int</span> Map[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][<span class="number">1</span>&lt;&lt;maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                Map[i][j] = min(Map[i][j], Map[i][k] + Map[k][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> v)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(dp[v][S] &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> dp[v][S];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(S == (<span class="number">1</span>&lt;&lt;n) - <span class="number">1</span> &amp;&amp; v == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> res = INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</div><div class="line">        <span class="keyword">if</span>(Map[v][u] &gt; <span class="number">0</span> &amp;&amp; !((S&gt;&gt;u)&amp;<span class="number">1</span>)) &#123;</div><div class="line">            res = min(res, Map[v][u] + solve(S|(<span class="number">1</span>&lt;&lt;u), u));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[v][S] = res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i ++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxn; j++) &#123;</div><div class="line">                Map[i][j] = INF;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">int</span>  u, v, w;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</div><div class="line">            u--; v--;</div><div class="line">            Map[u][v] = min(Map[u][v], w);</div><div class="line">            Map[v][u] = min(Map[v][u], w);</div><div class="line">        &#125;</div><div class="line">        floyd();</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve(<span class="number">0</span>, <span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">\\dp</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">16</span>;</div><div class="line"><span class="keyword">int</span> Map[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][<span class="number">1</span>&lt;&lt;maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">                Map[i][j] = min(Map[i][j], Map[i][k] + Map[k][j]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        fill(dp[i], dp[i] + (<span class="number">1</span>&lt;&lt;n), INF);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dp[<span class="number">0</span>][(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = (<span class="number">1</span>&lt;&lt;n) - <span class="number">2</span>; S &gt;= <span class="number">0</span>; S--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</div><div class="line">                <span class="keyword">if</span>(!((S&gt;&gt;u)&amp;<span class="number">1</span>)) &#123;</div><div class="line">                    dp[v][S] = min(dp[v][S], dp[u][S|<span class="number">1</span>&lt;&lt;u] + Map[v][u]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i ++) &#123;</div><div class="line">            fill(Map[i], Map[i] + maxn, INF);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">int</span>  u, v, w;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</div><div class="line">            u--; v--;</div><div class="line">            Map[u][v] = min(Map[u][v], w);</div><div class="line">            Map[v][u] = min(Map[v][u], w);</div><div class="line">        &#125;</div><div class="line">        floyd();</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">\\dp小优化</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">16</span>;</div><div class="line"><span class="keyword">int</span> Map[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][<span class="number">1</span>&lt;&lt;maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">                Map[i][j] = min(Map[i][j], Map[i][k] + Map[k][j]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        fill(dp[i], dp[i] + (<span class="number">1</span>&lt;&lt;n), INF);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dp[<span class="number">0</span>][(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = (<span class="number">1</span>&lt;&lt;n) - <span class="number">2</span>; S &gt;= <span class="number">0</span>; S--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++) &#123;</div><div class="line">            <span class="keyword">if</span>(S == <span class="number">0</span> || (S&gt;&gt;v)&amp;<span class="number">1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</div><div class="line">                <span class="keyword">if</span>(!((S&gt;&gt;u)&amp;<span class="number">1</span>)) &#123;</div><div class="line">                    dp[v][S] = min(dp[v][S], dp[u][S|<span class="number">1</span>&lt;&lt;u] + Map[v][u]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i ++) &#123;</div><div class="line">            fill(Map[i], Map[i] + maxn, INF);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">int</span>  u, v, w;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</div><div class="line">            u--; v--;</div><div class="line">            Map[u][v] = min(Map[u][v], w);</div><div class="line">            Map[v][u] = min(Map[v][u], w);</div><div class="line">        &#125;</div><div class="line">        floyd();</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#HDU5418 Victor and World#&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题意:很裸的旅行家问题&lt;/li&gt;
&lt;li&gt;思路:旅行家问题裸模板&lt;/li&gt;
&lt;li&gt;代码:这里贴三分代码,一份记忆化搜索,一份dp,一份dp的小优化.&lt;figure class=&quot;highlig
    
    </summary>
    
    
  </entry>
  
</feed>
